
F401RE_T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000371c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038cc  080038cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038cc  080038cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038d4  080038d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  2000000c  080038e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  080038e8  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008955  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b4  00000000  00000000  00028991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0002a048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152b5  00000000  00000000  0002aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b48  00000000  00000000  00040185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f63  00000000  00000000  00048ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccc30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc0  00000000  00000000  000ccc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003898 	.word	0x08003898

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003898 	.word	0x08003898

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

	/* MCU Configuration----------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004de:	f001 fcc7 	bl	8001e70 <HAL_Init>
	SystemClock_Config();
 80004e2:	f000 fdbf 	bl	8001064 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e6:	f000 fe53 	bl	8001190 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ea:	f000 fe27 	bl	800113c <MX_USART2_UART_Init>

	//IO INITs
	init_pins(PINS_);
 80004ee:	481a      	ldr	r0, [pc, #104]	; (8000558 <main+0x80>)
 80004f0:	f000 ff14 	bl	800131c <init_pins>
	// digitalWrite(0, HIGH);

    while (1) {

    	//USART2->;
  	  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 80004f4:	4b19      	ldr	r3, [pc, #100]	; (800055c <main+0x84>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f003 0320 	and.w	r3, r3, #32
 80004fe:	2b20      	cmp	r3, #32
 8000500:	d1f8      	bne.n	80004f4 <main+0x1c>

  		    //Write Test
    		uint8_t RMSG[3] = {0};
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <main+0x88>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	80bb      	strh	r3, [r7, #4]
 8000508:	2300      	movs	r3, #0
 800050a:	71bb      	strb	r3, [r7, #6]
  			command_read(RMSG);
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fd08 	bl	8000f24 <command_read>
  			delay(50);	//delay is important
 8000514:	2032      	movs	r0, #50	; 0x32
 8000516:	f000 fec4 	bl	80012a2 <delay>

  			if(crc_decode(RMSG) && RMSG[0] > 0){
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fd6f 	bl	8001000 <crc_decode>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0e5      	beq.n	80004f4 <main+0x1c>
 8000528:	793b      	ldrb	r3, [r7, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0e2      	beq.n	80004f4 <main+0x1c>

  				//Interpret Instructions
  				if (RMSG[1] < 128) {
 800052e:	797b      	ldrb	r3, [r7, #5]
 8000530:	b25b      	sxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	db04      	blt.n	8000540 <main+0x68>
  					run_tests(RMSG);
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f813 	bl	8000564 <run_tests>
 800053e:	e7d9      	b.n	80004f4 <main+0x1c>
  				}
  				else {
  					RMSG[0] = PINS_[RMSG[0]].pin;
 8000540:	793b      	ldrb	r3, [r7, #4]
 8000542:	4619      	mov	r1, r3
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <main+0x80>)
 8000546:	460b      	mov	r3, r1
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	440b      	add	r3, r1
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	4413      	add	r3, r2
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	713b      	strb	r3, [r7, #4]
  	  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 8000556:	e7cd      	b.n	80004f4 <main+0x1c>
 8000558:	20000028 	.word	0x20000028
 800055c:	20000628 	.word	0x20000628
 8000560:	080038b0 	.word	0x080038b0

08000564 <run_tests>:


/********************************************************/
//Tests
/********************************************************/
void run_tests(unsigned char data[]) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

	unsigned char pin = data[0];
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	73fb      	strb	r3, [r7, #15]
	unsigned char instruction = data[1];
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	785b      	ldrb	r3, [r3, #1]
 8000576:	73bb      	strb	r3, [r7, #14]

	// Test #1
	if(data[2] == 1) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3302      	adds	r3, #2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d115      	bne.n	80005ae <run_tests+0x4a>
		else if(instruction == 0) {
			pinMode(pin, OUTPUT);
			digitalWrite(pin, 0);
		}
		*/
		reset_pins();
 8000582:	f000 fcb9 	bl	8000ef8 <reset_pins>
		configure_output(pin, instruction);
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	7bba      	ldrb	r2, [r7, #14]
 800058a:	4611      	mov	r1, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f8c4 	bl	800071a <configure_output>
		command_write(data[0], data[1], data[2]);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3302      	adds	r3, #2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	f000 fcce 	bl	8000f48 <command_write>
	}
	else {
		command_write(data[0], data[1], data[2]);
	}

}
 80005ac:	e0b1      	b.n	8000712 <run_tests+0x1ae>
	else if(data[2] == 2) {
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3302      	adds	r3, #2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d115      	bne.n	80005e4 <run_tests+0x80>
		reset_pins();
 80005b8:	f000 fc9e 	bl	8000ef8 <reset_pins>
		configure_output(pin, instruction);
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	7bba      	ldrb	r2, [r7, #14]
 80005c0:	4611      	mov	r1, r2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f8a9 	bl	800071a <configure_output>
		command_write(data[0], data[1], data[2]);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3301      	adds	r3, #1
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3302      	adds	r3, #2
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	f000 fcb3 	bl	8000f48 <command_write>
}
 80005e2:	e096      	b.n	8000712 <run_tests+0x1ae>
	else if(data[2] == 3) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3302      	adds	r3, #2
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d113      	bne.n	8000616 <run_tests+0xb2>
		reset_pins();
 80005ee:	f000 fc83 	bl	8000ef8 <reset_pins>
		configure_input_pullup(pin);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f8be 	bl	8000776 <configure_input_pullup>
		command_write(data[0], data[1], data[2]);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3302      	adds	r3, #2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	f000 fc9a 	bl	8000f48 <command_write>
}
 8000614:	e07d      	b.n	8000712 <run_tests+0x1ae>
	else if(data[2] == 4) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3302      	adds	r3, #2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b04      	cmp	r3, #4
 800061e:	d113      	bne.n	8000648 <run_tests+0xe4>
		reset_pins();
 8000620:	f000 fc6a 	bl	8000ef8 <reset_pins>
		configure_input_pulldown(pin);
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f8b2 	bl	8000790 <configure_input_pulldown>
		command_write(data[0], data[1], data[2]);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3302      	adds	r3, #2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	f000 fc81 	bl	8000f48 <command_write>
}
 8000646:	e064      	b.n	8000712 <run_tests+0x1ae>
	else if(data[2] == 5) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3302      	adds	r3, #2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b05      	cmp	r3, #5
 8000650:	d116      	bne.n	8000680 <run_tests+0x11c>
		data[1] = configure_input(pin);
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f87c 	bl	8000752 <configure_input>
 800065a:	4602      	mov	r2, r0
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	701a      	strb	r2, [r3, #0]
		command_write(data[0], data[1], data[2]);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3301      	adds	r3, #1
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3302      	adds	r3, #2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	f000 fc65 	bl	8000f48 <command_write>
}
 800067e:	e048      	b.n	8000712 <run_tests+0x1ae>
	else if(data[2] == 6) {
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3302      	adds	r3, #2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b06      	cmp	r3, #6
 8000688:	d116      	bne.n	80006b8 <run_tests+0x154>
		data[1] = configure_analog_input(pin);
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f88c 	bl	80007aa <configure_analog_input>
 8000692:	4602      	mov	r2, r0
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	701a      	strb	r2, [r3, #0]
		command_write(data[0], data[1], data[2]);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3301      	adds	r3, #1
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	f000 fc49 	bl	8000f48 <command_write>
}
 80006b6:	e02c      	b.n	8000712 <run_tests+0x1ae>
	else if(data[2] == 7) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3302      	adds	r3, #2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b07      	cmp	r3, #7
 80006c0:	d11a      	bne.n	80006f8 <run_tests+0x194>
		if(instruction == 1) {
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d105      	bne.n	80006d4 <run_tests+0x170>
			configure_sleep_mode(1, pin);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	4619      	mov	r1, r3
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 f88f 	bl	80007f0 <configure_sleep_mode>
}
 80006d2:	e01e      	b.n	8000712 <run_tests+0x1ae>
		else if(instruction == 2) {
 80006d4:	7bbb      	ldrb	r3, [r7, #14]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d105      	bne.n	80006e6 <run_tests+0x182>
			configure_sleep_mode(2, pin);
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	4619      	mov	r1, r3
 80006de:	2002      	movs	r0, #2
 80006e0:	f000 f886 	bl	80007f0 <configure_sleep_mode>
}
 80006e4:	e015      	b.n	8000712 <run_tests+0x1ae>
		else if(instruction == 3) {
 80006e6:	7bbb      	ldrb	r3, [r7, #14]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d112      	bne.n	8000712 <run_tests+0x1ae>
			configure_sleep_mode(4, pin);
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	4619      	mov	r1, r3
 80006f0:	2004      	movs	r0, #4
 80006f2:	f000 f87d 	bl	80007f0 <configure_sleep_mode>
}
 80006f6:	e00c      	b.n	8000712 <run_tests+0x1ae>
		command_write(data[0], data[1], data[2]);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3301      	adds	r3, #1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3302      	adds	r3, #2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	f000 fc1b 	bl	8000f48 <command_write>
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <configure_output>:
 * Description: Configures GPIO pin as OUTPUT and turns the output to HIGH. Used for testing GPIO output voltage under load sourcing.
 * Accepts: unsigned int pin - the pin number to configure as OUTPUT
 *          unsigned int logic - HIGH or LOW logic
 * Returns: void
 */
void configure_output(unsigned int pin, unsigned int logic) {
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	6039      	str	r1, [r7, #0]
    pinMode(pin, OUTPUT);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2103      	movs	r1, #3
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f9a9 	bl	8000a80 <pinMode>
    if(logic) {
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d005      	beq.n	8000740 <configure_output+0x26>
      digitalWrite(pin, HIGH);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2101      	movs	r1, #1
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fb87 	bl	8000e4c <digitalWrite>
    }
    else {
      digitalWrite(pin, LOW);
    }
    return;
 800073e:	e005      	b.n	800074c <configure_output+0x32>
      digitalWrite(pin, LOW);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fb81 	bl	8000e4c <digitalWrite>
    return;
 800074a:	bf00      	nop
}
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <configure_input>:
 * Description: Configures GPIO pin as an INPUT. Used for testing input logic levels. The input pin cannot be a pullup,
 * as that would allow the pin to act as a current source and could damage the testing device's DAC.
 * Accepts: unsigned int pin - the pin number to configure as INPUT
 * Returns: int - 0 or 1 depending on input voltage of the pin (LOGIC LOW OR HIGH)
 */
int configure_input(unsigned int pin) {
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
    pinMode(pin, INPUT);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f98e 	bl	8000a80 <pinMode>
    return digitalRead(pin);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fb46 	bl	8000df8 <digitalRead>
 800076c:	4603      	mov	r3, r0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <configure_input_pullup>:
 * Description: Configures GPIO pin as INPUT_PULLUP. Used for testing the pin's unloaded pullup voltage and internal
 * resistance value.
 * Accepts: unsigned int pin - the pin number to configure as INPUT_PULLUP
 * Returns: void
 */
void configure_input_pullup(unsigned int pin) {
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
    pinMode(pin,INPUT_PULLUP);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f97c 	bl	8000a80 <pinMode>
    return;
 8000788:	bf00      	nop
}
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <configure_input_pulldown>:
 * Description: Configures GPIO pin as INPUT_PULLDOWN. Used for testing the pin's unloaded pullup voltage and internal
 * resistance value.
 * Accepts: unsigned int pin - the pin number to configure as INPUT_PULLDOWN
 * Returns: void
 */
void configure_input_pulldown(unsigned int pin) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    pinMode(pin,INPUT_PULLDOWN);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2102      	movs	r1, #2
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f96f 	bl	8000a80 <pinMode>
    return;
 80007a2:	bf00      	nop
}
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <configure_analog_input>:
 * Description: Returns the analog reading of the selected analog pin (A0, A1, ..., A5). Used for testing the Arduino's
 * ADC.
 * Accepts: unsigned int analogPin - the analog pin number to read
 * Returns: int - 0 to 1023, depending on the voltage reading of the ADC. (0 = GND, 1023 = 5V)
 */
int configure_analog_input(unsigned int analogPin) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
	pinMode(analogPin, INPUT);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f962 	bl	8000a80 <pinMode>
   return (analogRead(analogPin) >> 4); //returns a value 0- (0=GND,  = 3V3)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f8b6 	bl	8000930 <analogRead>
 80007c4:	4603      	mov	r3, r0
 80007c6:	111b      	asrs	r3, r3, #4
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_GPIO_EXTI_Callback>:

/********************************************************/
//IO  Sleep Modes / PINS
/********************************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
	SystemClock_Config();
 80007da:	f000 fc43 	bl	8001064 <SystemClock_Config>
	HAL_PWR_DisableSleepOnExit();
 80007de:	f001 ff13 	bl	8002608 <HAL_PWR_DisableSleepOnExit>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_ResumeTick();
 80007e2:	f001 fbc7 	bl	8001f74 <HAL_ResumeTick>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <configure_sleep_mode>:

//
void configure_sleep_mode(unsigned int mode, unsigned int interruptPin) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]

	// SLEEP == 1
	MX_GPIO_Init();
 80007fa:	f000 fcc9 	bl	8001190 <MX_GPIO_Init>
	SystemClock_Config();
 80007fe:	f000 fc31 	bl	8001064 <SystemClock_Config>
	// Wake Up = ?PA0 | D13
	if(mode == 1) {
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d10d      	bne.n	8000824 <configure_sleep_mode+0x34>
		HAL_PWR_EnableSEVOnPend();
 8000808:	f001 ff0e 	bl	8002628 <HAL_PWR_EnableSEVOnPend>
		wakeUp(interruptPin);
 800080c:	6838      	ldr	r0, [r7, #0]
 800080e:	f000 f83f 	bl	8000890 <wakeUp>
		HAL_SuspendTick();
 8000812:	f001 fb9f 	bl	8001f54 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 8000816:	2102      	movs	r1, #2
 8000818:	2000      	movs	r0, #0
 800081a:	f001 fe95 	bl	8002548 <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
 800081e:	f001 fba9 	bl	8001f74 <HAL_ResumeTick>
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
		}
		HAL_PWR_EnterSTANDBYMode();
	}

}
 8000822:	e02e      	b.n	8000882 <configure_sleep_mode+0x92>
	else if(mode == 2) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d114      	bne.n	8000854 <configure_sleep_mode+0x64>
		HAL_PWR_EnableSEVOnPend();
 800082a:	f001 fefd 	bl	8002628 <HAL_PWR_EnableSEVOnPend>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <configure_sleep_mode+0x9c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a16      	ldr	r2, [pc, #88]	; (800088c <configure_sleep_mode+0x9c>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6013      	str	r3, [r2, #0]
		HAL_SuspendTick();
 800083a:	f001 fb8b 	bl	8001f54 <HAL_SuspendTick>
		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800083e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000842:	f001 fe6f 	bl	8002524 <HAL_PWR_EnableWakeUpPin>
		HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000846:	2101      	movs	r1, #1
 8000848:	2000      	movs	r0, #0
 800084a:	f001 fe99 	bl	8002580 <HAL_PWR_EnterSTOPMode>
		HAL_ResumeTick();
 800084e:	f001 fb91 	bl	8001f74 <HAL_ResumeTick>
}
 8000852:	e016      	b.n	8000882 <configure_sleep_mode+0x92>
	else if(mode == 4) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b04      	cmp	r3, #4
 8000858:	d113      	bne.n	8000882 <configure_sleep_mode+0x92>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <configure_sleep_mode+0x9c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <configure_sleep_mode+0x9c>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6013      	str	r3, [r2, #0]
		if(interruptPin == 1) {
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d104      	bne.n	8000876 <configure_sleep_mode+0x86>
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800086c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000870:	f001 fe58 	bl	8002524 <HAL_PWR_EnableWakeUpPin>
 8000874:	e003      	b.n	800087e <configure_sleep_mode+0x8e>
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000876:	f44f 7080 	mov.w	r0, #256	; 0x100
 800087a:	f001 fe53 	bl	8002524 <HAL_PWR_EnableWakeUpPin>
		HAL_PWR_EnterSTANDBYMode();
 800087e:	f001 feab 	bl	80025d8 <HAL_PWR_EnterSTANDBYMode>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40007000 	.word	0x40007000

08000890 <wakeUp>:

// EXTI Interrupt Function
void wakeUp(int pin) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
		__disable_irq();

		// Pin A0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
		/*Configure GPIO pin : PA0 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ac:	2301      	movs	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b4:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <wakeUp+0x54>)
 80008c2:	f001 fc79 	bl	80021b8 <HAL_GPIO_Init>


		/* EXTI interrupt init*/
		HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2006      	movs	r0, #6
 80008cc:	f001 fc3d 	bl	800214a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008d0:	2006      	movs	r0, #6
 80008d2:	f001 fc56 	bl	8002182 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80008d6:	b662      	cpsie	i
}
 80008d8:	bf00      	nop
		__enable_irq();
}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40020000 	.word	0x40020000

080008e8 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	if(EXTI->PR == 0x2000) {
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <EXTI15_10_IRQHandler+0x44>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008f4:	d106      	bne.n	8000904 <EXTI15_10_IRQHandler+0x1c>
		HAL_ResumeTick();
 80008f6:	f001 fb3d 	bl	8001f74 <HAL_ResumeTick>
		EXTI->PR = 0x2000;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <EXTI15_10_IRQHandler+0x44>)
 80008fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	e008      	b.n	8000916 <EXTI15_10_IRQHandler+0x2e>
	}
	else if(EXTI->PR == 0x0001) {
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <EXTI15_10_IRQHandler+0x44>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d104      	bne.n	8000916 <EXTI15_10_IRQHandler+0x2e>
		HAL_ResumeTick();
 800090c:	f001 fb32 	bl	8001f74 <HAL_ResumeTick>
		EXTI->PR = 0x0001;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <EXTI15_10_IRQHandler+0x44>)
 8000912:	2201      	movs	r2, #1
 8000914:	615a      	str	r2, [r3, #20]
	}
	SystemClock_Config();
 8000916:	f000 fba5 	bl	8001064 <SystemClock_Config>
	HAL_PWR_DisableSleepOnExit();
 800091a:	f001 fe75 	bl	8002608 <HAL_PWR_DisableSleepOnExit>
	HAL_ResumeTick();
 800091e:	f001 fb29 	bl	8001f74 <HAL_ResumeTick>
	EXTI->PR = 0x0001;
 8000922:	4b02      	ldr	r3, [pc, #8]	; (800092c <EXTI15_10_IRQHandler+0x44>)
 8000924:	2201      	movs	r2, #1
 8000926:	615a      	str	r2, [r3, #20]
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40013c00 	.word	0x40013c00

08000930 <analogRead>:

/********************************************************/
// Read & Write Functions
/********************************************************/

int analogRead(int pin) { //!IN PROGRESS [NEED TO DEVELOP DEBUGGING METHOD]
 8000930:	b490      	push	{r4, r7}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

	int result, channel = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
	//SET REGESTERS p213

	//ANALOG MAPPING
	if(PINS_[pin].clock == 1) {
 800093c:	494d      	ldr	r1, [pc, #308]	; (8000a74 <analogRead+0x144>)
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	440b      	add	r3, r1
 800094a:	330c      	adds	r3, #12
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d109      	bne.n	8000966 <analogRead+0x36>
		channel = PINS_[pin].pin;
 8000952:	4948      	ldr	r1, [pc, #288]	; (8000a74 <analogRead+0x144>)
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	440b      	add	r3, r1
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e02a      	b.n	80009bc <analogRead+0x8c>
	}
	else if(PINS_[pin].clock == 2) {
 8000966:	4943      	ldr	r1, [pc, #268]	; (8000a74 <analogRead+0x144>)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4613      	mov	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	4413      	add	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	440b      	add	r3, r1
 8000974:	330c      	adds	r3, #12
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d10a      	bne.n	8000992 <analogRead+0x62>
		channel = PINS_[pin].pin + 8;
 800097c:	493d      	ldr	r1, [pc, #244]	; (8000a74 <analogRead+0x144>)
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	440b      	add	r3, r1
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3308      	adds	r3, #8
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	e014      	b.n	80009bc <analogRead+0x8c>
	}
	else if(PINS_[pin].clock == 4) {
 8000992:	4938      	ldr	r1, [pc, #224]	; (8000a74 <analogRead+0x144>)
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4613      	mov	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4413      	add	r3, r2
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	440b      	add	r3, r1
 80009a0:	330c      	adds	r3, #12
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d109      	bne.n	80009bc <analogRead+0x8c>
		channel = PINS_[pin].pin + 10;
 80009a8:	4932      	ldr	r1, [pc, #200]	; (8000a74 <analogRead+0x144>)
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	440b      	add	r3, r1
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	330a      	adds	r3, #10
 80009ba:	60fb      	str	r3, [r7, #12]
	}

	//Pin Setup
	RCC->AHB1ENR |= PINS_[pin].clock;  //clock for pin
 80009bc:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <analogRead+0x148>)
 80009be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009c0:	482c      	ldr	r0, [pc, #176]	; (8000a74 <analogRead+0x144>)
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	4403      	add	r3, r0
 80009ce:	330c      	adds	r3, #12
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <analogRead+0x148>)
 80009d4:	430b      	orrs	r3, r1
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
	PINS_[pin].GPIO->MODER |= (0x03 << (PINS_[pin].pin * 2)); // Set to ADC mode
 80009d8:	4926      	ldr	r1, [pc, #152]	; (8000a74 <analogRead+0x144>)
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	3310      	adds	r3, #16
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	4821      	ldr	r0, [pc, #132]	; (8000a74 <analogRead+0x144>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	4613      	mov	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	4403      	add	r3, r0
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	461c      	mov	r4, r3
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <analogRead+0x144>)
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	4403      	add	r3, r0
 8000a14:	3310      	adds	r3, #16
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	ea41 0204 	orr.w	r2, r1, r4
 8000a1c:	601a      	str	r2, [r3, #0]

	//ADC1
	RCC->APB2ENR |= 0x00000100; /* Enable ADC1 clock */
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <analogRead+0x148>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <analogRead+0x148>)
 8000a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
	/* Setup for ACD1 */
	ADC1->CR2 = 0;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <analogRead+0x14c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
	ADC1->SQR3 = channel;
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <analogRead+0x14c>)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR1 = 0;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <analogRead+0x14c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->CR2 |= 1;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <analogRead+0x14c>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <analogRead+0x14c>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6093      	str	r3, [r2, #8]

	//FIND VALUE in ADC1
	ADC1->CR2 |= 0x40000000;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <analogRead+0x14c>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <analogRead+0x14c>)
 8000a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a52:	6093      	str	r3, [r2, #8]
	while(!(ADC1->SR & 2)) {}
 8000a54:	bf00      	nop
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <analogRead+0x14c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f9      	beq.n	8000a56 <analogRead+0x126>
	result = ADC1->DR;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <analogRead+0x14c>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	60bb      	str	r3, [r7, #8]

	return result;
 8000a68:	68bb      	ldr	r3, [r7, #8]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc90      	pop	{r4, r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000028 	.word	0x20000028
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40012000 	.word	0x40012000

08000a80 <pinMode>:

void pinMode(int pin, int mode) {
 8000a80:	b490      	push	{r4, r7}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]

	if(mode == INPUT_PULLUP) { //P
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d179      	bne.n	8000b84 <pinMode+0x104>
		RCC->AHB1ENR |= PINS_[pin].clock;
 8000a90:	4ba7      	ldr	r3, [pc, #668]	; (8000d30 <pinMode+0x2b0>)
 8000a92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a94:	48a7      	ldr	r0, [pc, #668]	; (8000d34 <pinMode+0x2b4>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	4403      	add	r3, r0
 8000aa2:	330c      	adds	r3, #12
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4aa2      	ldr	r2, [pc, #648]	; (8000d30 <pinMode+0x2b0>)
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
 8000aac:	49a1      	ldr	r1, [pc, #644]	; (8000d34 <pinMode+0x2b4>)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	440b      	add	r3, r1
 8000aba:	3310      	adds	r3, #16
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6819      	ldr	r1, [r3, #0]
 8000ac0:	489c      	ldr	r0, [pc, #624]	; (8000d34 <pinMode+0x2b4>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	4403      	add	r3, r0
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	461c      	mov	r4, r3
 8000adc:	4895      	ldr	r0, [pc, #596]	; (8000d34 <pinMode+0x2b4>)
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	4403      	add	r3, r0
 8000aea:	3310      	adds	r3, #16
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	ea01 0204 	and.w	r2, r1, r4
 8000af2:	601a      	str	r2, [r3, #0]
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Pull-up resister by setting bit 0x01 */
 8000af4:	498f      	ldr	r1, [pc, #572]	; (8000d34 <pinMode+0x2b4>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	3310      	adds	r3, #16
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68d9      	ldr	r1, [r3, #12]
 8000b08:	488a      	ldr	r0, [pc, #552]	; (8000d34 <pinMode+0x2b4>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	4403      	add	r3, r0
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	461c      	mov	r4, r3
 8000b24:	4883      	ldr	r0, [pc, #524]	; (8000d34 <pinMode+0x2b4>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	4403      	add	r3, r0
 8000b32:	3310      	adds	r3, #16
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	ea01 0204 	and.w	r2, r1, r4
 8000b3a:	60da      	str	r2, [r3, #12]
		PINS_[pin].GPIO->PUPDR |= (0x01 << (PINS_[pin].pin * 2));
 8000b3c:	497d      	ldr	r1, [pc, #500]	; (8000d34 <pinMode+0x2b4>)
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68d9      	ldr	r1, [r3, #12]
 8000b50:	4878      	ldr	r0, [pc, #480]	; (8000d34 <pinMode+0x2b4>)
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	4403      	add	r3, r0
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2201      	movs	r2, #1
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	461c      	mov	r4, r3
 8000b6a:	4872      	ldr	r0, [pc, #456]	; (8000d34 <pinMode+0x2b4>)
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	4403      	add	r3, r0
 8000b78:	3310      	adds	r3, #16
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	ea41 0204 	orr.w	r2, r1, r4
 8000b80:	60da      	str	r2, [r3, #12]
		RCC->AHB1ENR |= PINS_[pin].clock;
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Floating by setting bit 0x01 */
	}

}
 8000b82:	e12f      	b.n	8000de4 <pinMode+0x364>
	else if(mode == INPUT_PULLDOWN) {
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d179      	bne.n	8000c7e <pinMode+0x1fe>
		RCC->AHB1ENR |= PINS_[pin].clock;
 8000b8a:	4b69      	ldr	r3, [pc, #420]	; (8000d30 <pinMode+0x2b0>)
 8000b8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b8e:	4869      	ldr	r0, [pc, #420]	; (8000d34 <pinMode+0x2b4>)
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4403      	add	r3, r0
 8000b9c:	330c      	adds	r3, #12
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a63      	ldr	r2, [pc, #396]	; (8000d30 <pinMode+0x2b0>)
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
 8000ba6:	4963      	ldr	r1, [pc, #396]	; (8000d34 <pinMode+0x2b4>)
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6819      	ldr	r1, [r3, #0]
 8000bba:	485e      	ldr	r0, [pc, #376]	; (8000d34 <pinMode+0x2b4>)
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4403      	add	r3, r0
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	461c      	mov	r4, r3
 8000bd6:	4857      	ldr	r0, [pc, #348]	; (8000d34 <pinMode+0x2b4>)
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	4403      	add	r3, r0
 8000be4:	3310      	adds	r3, #16
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	ea01 0204 	and.w	r2, r1, r4
 8000bec:	601a      	str	r2, [r3, #0]
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Pull-down resister by setting bit 0x02 */
 8000bee:	4951      	ldr	r1, [pc, #324]	; (8000d34 <pinMode+0x2b4>)
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3310      	adds	r3, #16
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68d9      	ldr	r1, [r3, #12]
 8000c02:	484c      	ldr	r0, [pc, #304]	; (8000d34 <pinMode+0x2b4>)
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	4403      	add	r3, r0
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	461c      	mov	r4, r3
 8000c1e:	4845      	ldr	r0, [pc, #276]	; (8000d34 <pinMode+0x2b4>)
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	4613      	mov	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	4403      	add	r3, r0
 8000c2c:	3310      	adds	r3, #16
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	ea01 0204 	and.w	r2, r1, r4
 8000c34:	60da      	str	r2, [r3, #12]
		PINS_[pin].GPIO->PUPDR |= (0x02 << (PINS_[pin].pin * 2));
 8000c36:	493f      	ldr	r1, [pc, #252]	; (8000d34 <pinMode+0x2b4>)
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	440b      	add	r3, r1
 8000c44:	3310      	adds	r3, #16
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68d9      	ldr	r1, [r3, #12]
 8000c4a:	483a      	ldr	r0, [pc, #232]	; (8000d34 <pinMode+0x2b4>)
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4403      	add	r3, r0
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	461c      	mov	r4, r3
 8000c64:	4833      	ldr	r0, [pc, #204]	; (8000d34 <pinMode+0x2b4>)
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4403      	add	r3, r0
 8000c72:	3310      	adds	r3, #16
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	ea41 0204 	orr.w	r2, r1, r4
 8000c7a:	60da      	str	r2, [r3, #12]
}
 8000c7c:	e0b2      	b.n	8000de4 <pinMode+0x364>
	else if(mode == OUTPUT) {
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d159      	bne.n	8000d38 <pinMode+0x2b8>
		RCC->AHB1ENR |= PINS_[pin].clock; 							/* Enable Port Clock */
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <pinMode+0x2b0>)
 8000c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c88:	482a      	ldr	r0, [pc, #168]	; (8000d34 <pinMode+0x2b4>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	4403      	add	r3, r0
 8000c96:	330c      	adds	r3, #12
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <pinMode+0x2b0>)
 8000c9c:	430b      	orrs	r3, r1
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
		(PINS_[pin].GPIO)->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode */
 8000ca0:	4924      	ldr	r1, [pc, #144]	; (8000d34 <pinMode+0x2b4>)
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3310      	adds	r3, #16
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6819      	ldr	r1, [r3, #0]
 8000cb4:	481f      	ldr	r0, [pc, #124]	; (8000d34 <pinMode+0x2b4>)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	4403      	add	r3, r0
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	461c      	mov	r4, r3
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <pinMode+0x2b4>)
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4403      	add	r3, r0
 8000cde:	3310      	adds	r3, #16
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	ea01 0204 	and.w	r2, r1, r4
 8000ce6:	601a      	str	r2, [r3, #0]
		(PINS_[pin].GPIO)->MODER |= (0x01 << (PINS_[pin].pin * 2));			/* Set Mode to Output */
 8000ce8:	4912      	ldr	r1, [pc, #72]	; (8000d34 <pinMode+0x2b4>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	3310      	adds	r3, #16
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6819      	ldr	r1, [r3, #0]
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <pinMode+0x2b4>)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4403      	add	r3, r0
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2201      	movs	r2, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	461c      	mov	r4, r3
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <pinMode+0x2b4>)
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4403      	add	r3, r0
 8000d24:	3310      	adds	r3, #16
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	ea41 0204 	orr.w	r2, r1, r4
 8000d2c:	601a      	str	r2, [r3, #0]
}
 8000d2e:	e059      	b.n	8000de4 <pinMode+0x364>
 8000d30:	40023800 	.word	0x40023800
 8000d34:	20000028 	.word	0x20000028
		RCC->AHB1ENR |= PINS_[pin].clock;
 8000d38:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <pinMode+0x370>)
 8000d3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d3c:	482d      	ldr	r0, [pc, #180]	; (8000df4 <pinMode+0x374>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4403      	add	r3, r0
 8000d4a:	330c      	adds	r3, #12
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <pinMode+0x370>)
 8000d50:	430b      	orrs	r3, r1
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
 8000d54:	4927      	ldr	r1, [pc, #156]	; (8000df4 <pinMode+0x374>)
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	440b      	add	r3, r1
 8000d62:	3310      	adds	r3, #16
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6819      	ldr	r1, [r3, #0]
 8000d68:	4822      	ldr	r0, [pc, #136]	; (8000df4 <pinMode+0x374>)
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4403      	add	r3, r0
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	461c      	mov	r4, r3
 8000d84:	481b      	ldr	r0, [pc, #108]	; (8000df4 <pinMode+0x374>)
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4403      	add	r3, r0
 8000d92:	3310      	adds	r3, #16
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	ea01 0204 	and.w	r2, r1, r4
 8000d9a:	601a      	str	r2, [r3, #0]
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Floating by setting bit 0x01 */
 8000d9c:	4915      	ldr	r1, [pc, #84]	; (8000df4 <pinMode+0x374>)
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	3310      	adds	r3, #16
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68d9      	ldr	r1, [r3, #12]
 8000db0:	4810      	ldr	r0, [pc, #64]	; (8000df4 <pinMode+0x374>)
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4403      	add	r3, r0
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	461c      	mov	r4, r3
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <pinMode+0x374>)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4403      	add	r3, r0
 8000dda:	3310      	adds	r3, #16
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	ea01 0204 	and.w	r2, r1, r4
 8000de2:	60da      	str	r2, [r3, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc90      	pop	{r4, r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	20000028 	.word	0x20000028

08000df8 <digitalRead>:

int digitalRead(int pin_num) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

	//RCC->AHB1ENR |= PINS_[pin_num].clock;
	//PINS_[pin_num].GPIO->MODER &= ~PINS_[pin_num].pin_clear_mode; 	/* Clear Mode to Input */
	//PINS_[pin_num].GPIO->PUPDR |= 0x00 << (PINS_[pin_num].pin * 2); 	/* Enable Pull-up resister by setting bit 0x01 */

	int out = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]

 	if(PINS_[pin_num].GPIO->IDR & (0x01 << PINS_[pin_num].pin)) {
 8000e04:	4910      	ldr	r1, [pc, #64]	; (8000e48 <digitalRead+0x50>)
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3310      	adds	r3, #16
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6919      	ldr	r1, [r3, #16]
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <digitalRead+0x50>)
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4403      	add	r3, r0
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	400b      	ands	r3, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <digitalRead+0x40>
 		out = 1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 	}

	return out;
 8000e38:	68fb      	ldr	r3, [r7, #12]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000028 	.word	0x20000028

08000e4c <digitalWrite>:


void digitalWrite(int pin, int logic) {
 8000e4c:	b490      	push	{r4, r7}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
	//RCC->AHB1ENR |= PINS_[pin].clock; 						/* Enable Port Clock */
	//PINS_[pin].GPIO->MODER &= ~PINS_[pin].pin_clear_mode; 	/* Clear Mode */
	//PINS_[pin].GPIO->MODER |= PINS_[pin].pin_out_mode;		/* Set Mode to Output */

	if(logic) {
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d022      	beq.n	8000ea2 <digitalWrite+0x56>
		PINS_[pin].GPIO->BSRR |= 0x01 << PINS_[pin].pin;
 8000e5c:	4925      	ldr	r1, [pc, #148]	; (8000ef4 <digitalWrite+0xa8>)
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	3310      	adds	r3, #16
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6999      	ldr	r1, [r3, #24]
 8000e70:	4820      	ldr	r0, [pc, #128]	; (8000ef4 <digitalWrite+0xa8>)
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	4403      	add	r3, r0
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2201      	movs	r2, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	461c      	mov	r4, r3
 8000e88:	481a      	ldr	r0, [pc, #104]	; (8000ef4 <digitalWrite+0xa8>)
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4403      	add	r3, r0
 8000e96:	3310      	adds	r3, #16
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	ea41 0204 	orr.w	r2, r1, r4
 8000e9e:	619a      	str	r2, [r3, #24]
	}
	else {
		PINS_[pin].GPIO->BSRR |= 0x01 << (PINS_[pin].pin + 16);
	}

}
 8000ea0:	e022      	b.n	8000ee8 <digitalWrite+0x9c>
		PINS_[pin].GPIO->BSRR |= 0x01 << (PINS_[pin].pin + 16);
 8000ea2:	4914      	ldr	r1, [pc, #80]	; (8000ef4 <digitalWrite+0xa8>)
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	3310      	adds	r3, #16
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6999      	ldr	r1, [r3, #24]
 8000eb6:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <digitalWrite+0xa8>)
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4403      	add	r3, r0
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3310      	adds	r3, #16
 8000ec8:	2201      	movs	r2, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	461c      	mov	r4, r3
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <digitalWrite+0xa8>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4403      	add	r3, r0
 8000ede:	3310      	adds	r3, #16
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	ea41 0204 	orr.w	r2, r1, r4
 8000ee6:	619a      	str	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc90      	pop	{r4, r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000028 	.word	0x20000028

08000ef8 <reset_pins>:

void reset_pins() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	int i;
	for(i = 1; i < 63; i++) {
 8000efe:	2301      	movs	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	e007      	b.n	8000f14 <reset_pins+0x1c>
		configure_output(i, LOW);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fc06 	bl	800071a <configure_output>
	for(i = 1; i < 63; i++) {
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3301      	adds	r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b3e      	cmp	r3, #62	; 0x3e
 8000f18:	ddf4      	ble.n	8000f04 <reset_pins+0xc>
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <command_read>:

/********************************************************/
//SERIAL
/********************************************************/

int command_read(unsigned char data[]) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(&huart2, data, 3, 1000); //Changed from 10000 & while loop
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	2203      	movs	r2, #3
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <command_read+0x20>)
 8000f36:	f002 f8fe 	bl	8003136 <HAL_UART_Receive>
	return 0;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000628 	.word	0x20000628

08000f48 <command_write>:

int command_write(unsigned int pin, unsigned int result, unsigned int test) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	//Write
	unsigned char data[3];
	crc_encode(data, pin, result, test);
 8000f54:	f107 0014 	add.w	r0, r7, #20
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	68f9      	ldr	r1, [r7, #12]
 8000f5e:	f000 f80f 	bl	8000f80 <crc_encode>
	HAL_UART_Transmit(&huart2, data, 3, 1000); //changed from 100
 8000f62:	f107 0114 	add.w	r1, r7, #20
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <command_write+0x34>)
 8000f6e:	f002 f850 	bl	8003012 <HAL_UART_Transmit>
	return 0;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000628 	.word	0x20000628

08000f80 <crc_encode>:

int crc_encode(unsigned char data[], unsigned int pin, unsigned int result, unsigned int test) {
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
	// Find the data
	unsigned long int crc_packet = ((pin << 16) & 0xFF0000) + ((result << 8) & 0xFF00) + ((test << 4) & 0xF0);
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	61fb      	str	r3, [r7, #28]

	// Calculate CRC Number
	unsigned int remainder = crc_packet % CRC_KEY;
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <crc_encode+0x7c>)
 8000fac:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb0:	0899      	lsrs	r1, r3, #2
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	61bb      	str	r3, [r7, #24]
	unsigned int crc = CRC_KEY - remainder;
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	f1c3 0305 	rsb	r3, r3, #5
 8000fc2:	617b      	str	r3, [r7, #20]

	crc_packet += crc;
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	4413      	add	r3, r2
 8000fca:	61fb      	str	r3, [r7, #28]

	data[0] = ((crc_packet >> 16)) & 0xFF;
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	0c1b      	lsrs	r3, r3, #16
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	701a      	strb	r2, [r3, #0]
	data[1] = ((crc_packet >> 8)) & 0xFF;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	0a1a      	lsrs	r2, r3, #8
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	701a      	strb	r2, [r3, #0]
	data[2] = ((crc_packet) & 0xFF);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]

	return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	cccccccd 	.word	0xcccccccd

08001000 <crc_decode>:


int crc_decode(unsigned char data[]) {
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

	// Find the data
	unsigned long int crc_packet = (((unsigned long int)data[0] << 16) & 0xFF0000)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
			+ (((unsigned long int)data[1] << 8) & 0xFF00) + (((unsigned long int)data[2]));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	3202      	adds	r2, #2
 8001022:	7812      	ldrb	r2, [r2, #0]
	unsigned long int crc_packet = (((unsigned long int)data[0] << 16) & 0xFF0000)
 8001024:	4413      	add	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]

	if(crc_packet % CRC_KEY) {
 8001028:	68f9      	ldr	r1, [r7, #12]
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <crc_decode+0x60>)
 800102c:	fba3 2301 	umull	r2, r3, r3, r1
 8001030:	089a      	lsrs	r2, r3, #2
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	1aca      	subs	r2, r1, r3
 800103a:	2a00      	cmp	r2, #0
 800103c:	d001      	beq.n	8001042 <crc_decode+0x42>
		return 0;
 800103e:	2300      	movs	r3, #0
 8001040:	e008      	b.n	8001054 <crc_decode+0x54>
	}

	data[2] = (data[2] & 0xF0) >> 4;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3302      	adds	r3, #2
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3302      	adds	r3, #2
 800104c:	0912      	lsrs	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]

	return 1;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	cccccccd 	.word	0xcccccccd

08001064 <SystemClock_Config>:

/***********************************************************/
/********* BASIC AUTO-GENERATED STM CONFIGURATIONS *********/
/***********************************************************/
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	; 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fc08 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <SystemClock_Config+0xd0>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <SystemClock_Config+0xd0>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <SystemClock_Config+0xd0>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <SystemClock_Config+0xd4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <SystemClock_Config+0xd4>)
 80010b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <SystemClock_Config+0xd4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010d8:	2310      	movs	r3, #16
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e6:	2307      	movs	r3, #7
 80010e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 faaa 	bl	8002648 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010fa:	f000 f8cd 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2302      	movs	r3, #2
 8001104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2102      	movs	r1, #2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fd0c 	bl	8002b38 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001126:	f000 f8b7 	bl	8001298 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_USART2_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001174:	f001 ff00 	bl	8002f78 <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f000 f88b 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000628 	.word	0x20000628
 800118c:	40004400 	.word	0x40004400

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <MX_GPIO_Init+0xfc>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a37      	ldr	r2, [pc, #220]	; (800128c <MX_GPIO_Init+0xfc>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b35      	ldr	r3, [pc, #212]	; (800128c <MX_GPIO_Init+0xfc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <MX_GPIO_Init+0xfc>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a30      	ldr	r2, [pc, #192]	; (800128c <MX_GPIO_Init+0xfc>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b2e      	ldr	r3, [pc, #184]	; (800128c <MX_GPIO_Init+0xfc>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_GPIO_Init+0xfc>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a29      	ldr	r2, [pc, #164]	; (800128c <MX_GPIO_Init+0xfc>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <MX_GPIO_Init+0xfc>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <MX_GPIO_Init+0xfc>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a22      	ldr	r2, [pc, #136]	; (800128c <MX_GPIO_Init+0xfc>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <MX_GPIO_Init+0xfc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	481d      	ldr	r0, [pc, #116]	; (8001290 <MX_GPIO_Init+0x100>)
 800121c:	f001 f950 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001226:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4817      	ldr	r0, [pc, #92]	; (8001294 <MX_GPIO_Init+0x104>)
 8001238:	f000 ffbe 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001240:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	480f      	ldr	r0, [pc, #60]	; (8001290 <MX_GPIO_Init+0x100>)
 8001252:	f000 ffb1 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001256:	2320      	movs	r3, #32
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4808      	ldr	r0, [pc, #32]	; (8001290 <MX_GPIO_Init+0x100>)
 800126e:	f000 ffa3 	bl	80021b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2006      	movs	r0, #6
 8001278:	f000 ff67 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800127c:	2006      	movs	r0, #6
 800127e:	f000 ff80 	bl	8002182 <HAL_NVIC_EnableIRQ>

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000
 8001294:	40020800 	.word	0x40020800

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <Error_Handler+0x8>

080012a2 <delay>:
#include "main.h"
#include "setup.h"


//Basic Delay
void delay(int n) {
 80012a2:	b480      	push	{r7}
 80012a4:	b085      	sub	sp, #20
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	int i;
	for(; n > 0; n--) {
 80012aa:	e00d      	b.n	80012c8 <delay+0x26>
		for(i =0; i < 3195; i++);
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e002      	b.n	80012b8 <delay+0x16>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3301      	adds	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f640 427a 	movw	r2, #3194	; 0xc7a
 80012be:	4293      	cmp	r3, r2
 80012c0:	ddf7      	ble.n	80012b2 <delay+0x10>
	for(; n > 0; n--) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dcee      	bgt.n	80012ac <delay+0xa>
	}

}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <pin_set>:

struct pin pin_set(uint32_t pin, uint32_t clock, GPIO_TypeDef * gpio,  uint8_t pin_id) {
 80012dc:	b4b0      	push	{r4, r5, r7}
 80012de:	b08b      	sub	sp, #44	; 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]

	struct pin P;
	P.pin = pin;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	613b      	str	r3, [r7, #16]
	P.pin_id = pin_id;
 80012ee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	P.clock = clock;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	61fb      	str	r3, [r7, #28]
	P.GPIO = gpio;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	623b      	str	r3, [r7, #32]


	return P;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	461d      	mov	r5, r3
 8001302:	f107 0410 	add.w	r4, r7, #16
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800130e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	372c      	adds	r7, #44	; 0x2c
 8001316:	46bd      	mov	sp, r7
 8001318:	bcb0      	pop	{r4, r5, r7}
 800131a:	4770      	bx	lr

0800131c <init_pins>:


//Initialize pin struct array
void init_pins(struct pin pins[]) {
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af02      	add	r7, sp, #8
 8001322:	61f8      	str	r0, [r7, #28]

	//Pin 0 Example | PA5
	pins[0] = pin_set(0x05, 0x01, GPIOA, 0);
 8001324:	69fc      	ldr	r4, [r7, #28]
 8001326:	4638      	mov	r0, r7
 8001328:	2300      	movs	r3, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	4bc9      	ldr	r3, [pc, #804]	; (8001654 <init_pins+0x338>)
 800132e:	2201      	movs	r2, #1
 8001330:	2105      	movs	r1, #5
 8001332:	f7ff ffd3 	bl	80012dc <pin_set>
 8001336:	4625      	mov	r5, r4
 8001338:	463c      	mov	r4, r7
 800133a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001342:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 1 | PD2
	pins[1] = pin_set(0x02, 0x08, GPIOD, 1);
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f103 0418 	add.w	r4, r3, #24
 800134c:	4638      	mov	r0, r7
 800134e:	2301      	movs	r3, #1
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	4bc1      	ldr	r3, [pc, #772]	; (8001658 <init_pins+0x33c>)
 8001354:	2208      	movs	r2, #8
 8001356:	2102      	movs	r1, #2
 8001358:	f7ff ffc0 	bl	80012dc <pin_set>
 800135c:	4625      	mov	r5, r4
 800135e:	463c      	mov	r4, r7
 8001360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001364:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001368:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 2 | PC12
	pins[2] = pin_set(0x0C, 0x04, GPIOC, 2);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001372:	4638      	mov	r0, r7
 8001374:	2302      	movs	r3, #2
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4bb8      	ldr	r3, [pc, #736]	; (800165c <init_pins+0x340>)
 800137a:	2204      	movs	r2, #4
 800137c:	210c      	movs	r1, #12
 800137e:	f7ff ffad 	bl	80012dc <pin_set>
 8001382:	4625      	mov	r5, r4
 8001384:	463c      	mov	r4, r7
 8001386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800138e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 3 | PC11
	pins[3] = pin_set(0x0B, 0x04, GPIOC, 3);
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001398:	4638      	mov	r0, r7
 800139a:	2303      	movs	r3, #3
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4baf      	ldr	r3, [pc, #700]	; (800165c <init_pins+0x340>)
 80013a0:	2204      	movs	r2, #4
 80013a2:	210b      	movs	r1, #11
 80013a4:	f7ff ff9a 	bl	80012dc <pin_set>
 80013a8:	4625      	mov	r5, r4
 80013aa:	463c      	mov	r4, r7
 80013ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b4:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 4 | PC10
	pins[4] = pin_set(0x0A, 0x04, GPIOC, 4);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80013be:	4638      	mov	r0, r7
 80013c0:	2304      	movs	r3, #4
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	4ba5      	ldr	r3, [pc, #660]	; (800165c <init_pins+0x340>)
 80013c6:	2204      	movs	r2, #4
 80013c8:	210a      	movs	r1, #10
 80013ca:	f7ff ff87 	bl	80012dc <pin_set>
 80013ce:	4625      	mov	r5, r4
 80013d0:	463c      	mov	r4, r7
 80013d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013da:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 5 | PB8
	pins[5] = pin_set(0x08, 0x02, GPIOB, 5);
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80013e4:	4638      	mov	r0, r7
 80013e6:	2305      	movs	r3, #5
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	4b9d      	ldr	r3, [pc, #628]	; (8001660 <init_pins+0x344>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	2108      	movs	r1, #8
 80013f0:	f7ff ff74 	bl	80012dc <pin_set>
 80013f4:	4625      	mov	r5, r4
 80013f6:	463c      	mov	r4, r7
 80013f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001400:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 6 | PC6
	pins[6] = pin_set(0x06, 0x04, GPIOC, 6);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800140a:	4638      	mov	r0, r7
 800140c:	2306      	movs	r3, #6
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4b92      	ldr	r3, [pc, #584]	; (800165c <init_pins+0x340>)
 8001412:	2204      	movs	r2, #4
 8001414:	2106      	movs	r1, #6
 8001416:	f7ff ff61 	bl	80012dc <pin_set>
 800141a:	4625      	mov	r5, r4
 800141c:	463c      	mov	r4, r7
 800141e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001426:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 7 | PC9
	pins[7] = pin_set(0x09, 0x04, GPIOC, 7);
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8001430:	4638      	mov	r0, r7
 8001432:	2307      	movs	r3, #7
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	4b89      	ldr	r3, [pc, #548]	; (800165c <init_pins+0x340>)
 8001438:	2204      	movs	r2, #4
 800143a:	2109      	movs	r1, #9
 800143c:	f7ff ff4e 	bl	80012dc <pin_set>
 8001440:	4625      	mov	r5, r4
 8001442:	463c      	mov	r4, r7
 8001444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001448:	e894 0003 	ldmia.w	r4, {r0, r1}
 800144c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 8 | PC8
	pins[8] = pin_set(0x08, 0x04, GPIOC, 8);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8001456:	4638      	mov	r0, r7
 8001458:	2308      	movs	r3, #8
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	4b7f      	ldr	r3, [pc, #508]	; (800165c <init_pins+0x340>)
 800145e:	2204      	movs	r2, #4
 8001460:	2108      	movs	r1, #8
 8001462:	f7ff ff3b 	bl	80012dc <pin_set>
 8001466:	4625      	mov	r5, r4
 8001468:	463c      	mov	r4, r7
 800146a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001472:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 9 | REF
	pins[9] = pin_set(0x00, 0x00, GPIOA, 9);
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800147c:	4638      	mov	r0, r7
 800147e:	2309      	movs	r3, #9
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4b74      	ldr	r3, [pc, #464]	; (8001654 <init_pins+0x338>)
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	f7ff ff28 	bl	80012dc <pin_set>
 800148c:	4625      	mov	r5, r4
 800148e:	463c      	mov	r4, r7
 8001490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001494:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001498:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 10 | BOOT0
	pins[10] = pin_set(0x00, 0x00, GPIOA, 10);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80014a2:	4638      	mov	r0, r7
 80014a4:	230a      	movs	r3, #10
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <init_pins+0x338>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	f7ff ff15 	bl	80012dc <pin_set>
 80014b2:	4625      	mov	r5, r4
 80014b4:	463c      	mov	r4, r7
 80014b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014be:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 11 | E5V
	pins[11] = pin_set(0x00, 0x00, GPIOA, 11);
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f503 7484 	add.w	r4, r3, #264	; 0x108
 80014c8:	4638      	mov	r0, r7
 80014ca:	230b      	movs	r3, #11
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	4b61      	ldr	r3, [pc, #388]	; (8001654 <init_pins+0x338>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	f7ff ff02 	bl	80012dc <pin_set>
 80014d8:	4625      	mov	r5, r4
 80014da:	463c      	mov	r4, r7
 80014dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014e4:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 12 | VDD
	pins[12] = pin_set(0x00, 0x00, GPIOA, 12);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80014ee:	4638      	mov	r0, r7
 80014f0:	230c      	movs	r3, #12
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4b57      	ldr	r3, [pc, #348]	; (8001654 <init_pins+0x338>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	f7ff feef 	bl	80012dc <pin_set>
 80014fe:	4625      	mov	r5, r4
 8001500:	463c      	mov	r4, r7
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 13 | AVDD
	pins[13] = pin_set(0x00, 0x00, GPIOA, 13);
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8001514:	4638      	mov	r0, r7
 8001516:	230d      	movs	r3, #13
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <init_pins+0x338>)
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	f7ff fedc 	bl	80012dc <pin_set>
 8001524:	4625      	mov	r5, r4
 8001526:	463c      	mov	r4, r7
 8001528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001530:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 14 | U5V
	pins[14] = pin_set(0x00, 0x00, GPIOA, 14);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800153a:	4638      	mov	r0, r7
 800153c:	230e      	movs	r3, #14
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4b44      	ldr	r3, [pc, #272]	; (8001654 <init_pins+0x338>)
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	f7ff fec9 	bl	80012dc <pin_set>
 800154a:	4625      	mov	r5, r4
 800154c:	463c      	mov	r4, r7
 800154e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001552:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001556:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 15 | PB9
	pins[15] = pin_set(0x09, 0x04, GPIOB, 15);
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8001560:	4638      	mov	r0, r7
 8001562:	230f      	movs	r3, #15
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <init_pins+0x344>)
 8001568:	2204      	movs	r2, #4
 800156a:	2109      	movs	r1, #9
 800156c:	f7ff feb6 	bl	80012dc <pin_set>
 8001570:	4625      	mov	r5, r4
 8001572:	463c      	mov	r4, r7
 8001574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001578:	e894 0003 	ldmia.w	r4, {r0, r1}
 800157c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 16 | PC5
	pins[16] = pin_set(0x05, 0x04, GPIOC, 16);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8001586:	4638      	mov	r0, r7
 8001588:	2310      	movs	r3, #16
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <init_pins+0x340>)
 800158e:	2204      	movs	r2, #4
 8001590:	2105      	movs	r1, #5
 8001592:	f7ff fea3 	bl	80012dc <pin_set>
 8001596:	4625      	mov	r5, r4
 8001598:	463c      	mov	r4, r7
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a2:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 17 | PA14
	pins[17] = pin_set(0x00, 0x01, GPIOA, 17);
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 80015ac:	4638      	mov	r0, r7
 80015ae:	2311      	movs	r3, #17
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <init_pins+0x338>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	2100      	movs	r1, #0
 80015b8:	f7ff fe90 	bl	80012dc <pin_set>
 80015bc:	4625      	mov	r5, r4
 80015be:	463c      	mov	r4, r7
 80015c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c8:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 18 | 3V3
	pins[18] = pin_set(0x00, 0x00, GPIOA, 18);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 80015d2:	4638      	mov	r0, r7
 80015d4:	2312      	movs	r3, #18
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <init_pins+0x338>)
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	f7ff fe7d 	bl	80012dc <pin_set>
 80015e2:	4625      	mov	r5, r4
 80015e4:	463c      	mov	r4, r7
 80015e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ee:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 19 | PA13
	pins[19] = pin_set(0x00, 0x01, GPIOA, 19);
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 80015f8:	4638      	mov	r0, r7
 80015fa:	2313      	movs	r3, #19
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <init_pins+0x338>)
 8001600:	2201      	movs	r2, #1
 8001602:	2100      	movs	r1, #0
 8001604:	f7ff fe6a 	bl	80012dc <pin_set>
 8001608:	4625      	mov	r5, r4
 800160a:	463c      	mov	r4, r7
 800160c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001610:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001614:	e885 0003 	stmia.w	r5, {r0, r1}


	//Pin 20 | RESET
	pins[20] = pin_set(0x00, 0x00, GPIOA, 20);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 800161e:	4638      	mov	r0, r7
 8001620:	2314      	movs	r3, #20
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <init_pins+0x338>)
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	f7ff fe57 	bl	80012dc <pin_set>
 800162e:	4625      	mov	r5, r4
 8001630:	463c      	mov	r4, r7
 8001632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800163a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 21 | PA6
	pins[21] = pin_set(0x06, 0x01, GPIOA, 21);
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8001644:	4638      	mov	r0, r7
 8001646:	2315      	movs	r3, #21
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	4b02      	ldr	r3, [pc, #8]	; (8001654 <init_pins+0x338>)
 800164c:	2201      	movs	r2, #1
 800164e:	2106      	movs	r1, #6
 8001650:	e008      	b.n	8001664 <init_pins+0x348>
 8001652:	bf00      	nop
 8001654:	40020000 	.word	0x40020000
 8001658:	40020c00 	.word	0x40020c00
 800165c:	40020800 	.word	0x40020800
 8001660:	40020400 	.word	0x40020400
 8001664:	f7ff fe3a 	bl	80012dc <pin_set>
 8001668:	4625      	mov	r5, r4
 800166a:	463c      	mov	r4, r7
 800166c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001674:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 22 | PA11
	pins[22] = pin_set(0x0B, 0x01, GPIOA, 22);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f503 7404 	add.w	r4, r3, #528	; 0x210
 800167e:	4638      	mov	r0, r7
 8001680:	2316      	movs	r3, #22
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4bc9      	ldr	r3, [pc, #804]	; (80019ac <init_pins+0x690>)
 8001686:	2201      	movs	r2, #1
 8001688:	210b      	movs	r1, #11
 800168a:	f7ff fe27 	bl	80012dc <pin_set>
 800168e:	4625      	mov	r5, r4
 8001690:	463c      	mov	r4, r7
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 23 | PA5
	pins[23] = pin_set(0x05, 0x01, GPIOA, 23);
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f503 740a 	add.w	r4, r3, #552	; 0x228
 80016a4:	4638      	mov	r0, r7
 80016a6:	2317      	movs	r3, #23
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4bc0      	ldr	r3, [pc, #768]	; (80019ac <init_pins+0x690>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	2105      	movs	r1, #5
 80016b0:	f7ff fe14 	bl	80012dc <pin_set>
 80016b4:	4625      	mov	r5, r4
 80016b6:	463c      	mov	r4, r7
 80016b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c0:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 24 | PA12
	pins[24] = pin_set(0x0C, 0x01, GPIOA, 24);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f503 7410 	add.w	r4, r3, #576	; 0x240
 80016ca:	4638      	mov	r0, r7
 80016cc:	2318      	movs	r3, #24
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4bb6      	ldr	r3, [pc, #728]	; (80019ac <init_pins+0x690>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	210c      	movs	r1, #12
 80016d6:	f7ff fe01 	bl	80012dc <pin_set>
 80016da:	4625      	mov	r5, r4
 80016dc:	463c      	mov	r4, r7
 80016de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e6:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 25 | PC13
	pins[25] = pin_set(0x0D, 0x04, GPIOC, 25);
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f503 7416 	add.w	r4, r3, #600	; 0x258
 80016f0:	4638      	mov	r0, r7
 80016f2:	2319      	movs	r3, #25
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	4bae      	ldr	r3, [pc, #696]	; (80019b0 <init_pins+0x694>)
 80016f8:	2204      	movs	r2, #4
 80016fa:	210d      	movs	r1, #13
 80016fc:	f7ff fdee 	bl	80012dc <pin_set>
 8001700:	4625      	mov	r5, r4
 8001702:	463c      	mov	r4, r7
 8001704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001708:	e894 0003 	ldmia.w	r4, {r0, r1}
 800170c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 26 | PB7
	pins[26] = pin_set(0x07, 0x02, GPIOB, 26);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f503 741c 	add.w	r4, r3, #624	; 0x270
 8001716:	4638      	mov	r0, r7
 8001718:	231a      	movs	r3, #26
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4ba5      	ldr	r3, [pc, #660]	; (80019b4 <init_pins+0x698>)
 800171e:	2202      	movs	r2, #2
 8001720:	2107      	movs	r1, #7
 8001722:	f7ff fddb 	bl	80012dc <pin_set>
 8001726:	4625      	mov	r5, r4
 8001728:	463c      	mov	r4, r7
 800172a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001732:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 27 | PA15
	pins[27] = pin_set(0x0F, 0x01, GPIOA, 27);
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f503 7422 	add.w	r4, r3, #648	; 0x288
 800173c:	4638      	mov	r0, r7
 800173e:	231b      	movs	r3, #27
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	4b9a      	ldr	r3, [pc, #616]	; (80019ac <init_pins+0x690>)
 8001744:	2201      	movs	r2, #1
 8001746:	210f      	movs	r1, #15
 8001748:	f7ff fdc8 	bl	80012dc <pin_set>
 800174c:	4625      	mov	r5, r4
 800174e:	463c      	mov	r4, r7
 8001750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001754:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001758:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 28 | 5V
	pins[28] = pin_set(0x00, 0x00, GPIOA, 28);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8001762:	4638      	mov	r0, r7
 8001764:	231c      	movs	r3, #28
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4b90      	ldr	r3, [pc, #576]	; (80019ac <init_pins+0x690>)
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	f7ff fdb5 	bl	80012dc <pin_set>
 8001772:	4625      	mov	r5, r4
 8001774:	463c      	mov	r4, r7
 8001776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800177e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 29 | PB2
	pins[29] = pin_set(0x02, 0x02, GPIOB, 29);
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 8001788:	4638      	mov	r0, r7
 800178a:	231d      	movs	r3, #29
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <init_pins+0x698>)
 8001790:	2202      	movs	r2, #2
 8001792:	2102      	movs	r1, #2
 8001794:	f7ff fda2 	bl	80012dc <pin_set>
 8001798:	4625      	mov	r5, r4
 800179a:	463c      	mov	r4, r7
 800179c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017a4:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 30 | PB6
	pins[30] = pin_set(0x06, 0x02, GPIOB, 30);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 80017ae:	4638      	mov	r0, r7
 80017b0:	231e      	movs	r3, #30
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <init_pins+0x698>)
 80017b6:	2202      	movs	r2, #2
 80017b8:	2106      	movs	r1, #6
 80017ba:	f7ff fd8f 	bl	80012dc <pin_set>
 80017be:	4625      	mov	r5, r4
 80017c0:	463c      	mov	r4, r7
 80017c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ca:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 31 | PB12
	pins[31] = pin_set(0x0C, 0x02, GPIOB, 31);
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 80017d4:	4638      	mov	r0, r7
 80017d6:	231f      	movs	r3, #31
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	4b76      	ldr	r3, [pc, #472]	; (80019b4 <init_pins+0x698>)
 80017dc:	2202      	movs	r2, #2
 80017de:	210c      	movs	r1, #12
 80017e0:	f7ff fd7c 	bl	80012dc <pin_set>
 80017e4:	4625      	mov	r5, r4
 80017e6:	463c      	mov	r4, r7
 80017e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f0:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 32 | PA7
	pins[32] = pin_set(0x07, 0x01, GPIOA, 32);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f503 7440 	add.w	r4, r3, #768	; 0x300
 80017fa:	4638      	mov	r0, r7
 80017fc:	2320      	movs	r3, #32
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <init_pins+0x690>)
 8001802:	2201      	movs	r2, #1
 8001804:	2107      	movs	r1, #7
 8001806:	f7ff fd69 	bl	80012dc <pin_set>
 800180a:	4625      	mov	r5, r4
 800180c:	463c      	mov	r4, r7
 800180e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001816:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 33 | PC15
	pins[33] = pin_set(0x0F, 0x04, GPIOC, 33);
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f503 7446 	add.w	r4, r3, #792	; 0x318
 8001820:	4638      	mov	r0, r7
 8001822:	2321      	movs	r3, #33	; 0x21
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	4b62      	ldr	r3, [pc, #392]	; (80019b0 <init_pins+0x694>)
 8001828:	2204      	movs	r2, #4
 800182a:	210f      	movs	r1, #15
 800182c:	f7ff fd56 	bl	80012dc <pin_set>
 8001830:	4625      	mov	r5, r4
 8001832:	463c      	mov	r4, r7
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	e894 0003 	ldmia.w	r4, {r0, r1}
 800183c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 34 | PA0
	pins[34] = pin_set(0x00, 0x01, GPIOA, 34);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8001846:	4638      	mov	r0, r7
 8001848:	2322      	movs	r3, #34	; 0x22
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	4b57      	ldr	r3, [pc, #348]	; (80019ac <init_pins+0x690>)
 800184e:	2201      	movs	r2, #1
 8001850:	2100      	movs	r1, #0
 8001852:	f7ff fd43 	bl	80012dc <pin_set>
 8001856:	4625      	mov	r5, r4
 8001858:	463c      	mov	r4, r7
 800185a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001862:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 35 | PC14
	pins[35] = pin_set(0x0E, 0x04, GPIOC, 35);
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 7452 	add.w	r4, r3, #840	; 0x348
 800186c:	4638      	mov	r0, r7
 800186e:	2323      	movs	r3, #35	; 0x23
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <init_pins+0x694>)
 8001874:	2204      	movs	r2, #4
 8001876:	210e      	movs	r1, #14
 8001878:	f7ff fd30 	bl	80012dc <pin_set>
 800187c:	4625      	mov	r5, r4
 800187e:	463c      	mov	r4, r7
 8001880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001884:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001888:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 36 | VIN
	pins[36] = pin_set(0x00, 0x00, GPIOA, 36);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f503 7458 	add.w	r4, r3, #864	; 0x360
 8001892:	4638      	mov	r0, r7
 8001894:	2324      	movs	r3, #36	; 0x24
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4b44      	ldr	r3, [pc, #272]	; (80019ac <init_pins+0x690>)
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	f7ff fd1d 	bl	80012dc <pin_set>
 80018a2:	4625      	mov	r5, r4
 80018a4:	463c      	mov	r4, r7
 80018a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ae:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 37 | PA8
	pins[37] = pin_set(0x08, 0x01, GPIOA, 37);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f503 745e 	add.w	r4, r3, #888	; 0x378
 80018b8:	4638      	mov	r0, r7
 80018ba:	2325      	movs	r3, #37	; 0x25
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <init_pins+0x690>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	2108      	movs	r1, #8
 80018c4:	f7ff fd0a 	bl	80012dc <pin_set>
 80018c8:	4625      	mov	r5, r4
 80018ca:	463c      	mov	r4, r7
 80018cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018d4:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 38 | PB1
	pins[38] = pin_set(0x01, 0x02, GPIOB, 38);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 7464 	add.w	r4, r3, #912	; 0x390
 80018de:	4638      	mov	r0, r7
 80018e0:	2326      	movs	r3, #38	; 0x26
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <init_pins+0x698>)
 80018e6:	2202      	movs	r2, #2
 80018e8:	2101      	movs	r1, #1
 80018ea:	f7ff fcf7 	bl	80012dc <pin_set>
 80018ee:	4625      	mov	r5, r4
 80018f0:	463c      	mov	r4, r7
 80018f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018fa:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 39 | PA9
	pins[39] = pin_set(0x09, 0x01, GPIOA, 39);
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f503 746a 	add.w	r4, r3, #936	; 0x3a8
 8001904:	4638      	mov	r0, r7
 8001906:	2327      	movs	r3, #39	; 0x27
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <init_pins+0x690>)
 800190c:	2201      	movs	r2, #1
 800190e:	2109      	movs	r1, #9
 8001910:	f7ff fce4 	bl	80012dc <pin_set>
 8001914:	4625      	mov	r5, r4
 8001916:	463c      	mov	r4, r7
 8001918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001920:	e885 0003 	stmia.w	r5, {r0, r1}


	//Pin 40 | PC7
	pins[40] = pin_set(0x07, 0x04, GPIOC, 40);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
 800192a:	4638      	mov	r0, r7
 800192c:	2328      	movs	r3, #40	; 0x28
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <init_pins+0x694>)
 8001932:	2204      	movs	r2, #4
 8001934:	2107      	movs	r1, #7
 8001936:	f7ff fcd1 	bl	80012dc <pin_set>
 800193a:	4625      	mov	r5, r4
 800193c:	463c      	mov	r4, r7
 800193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001942:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001946:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 41 | PH1
	pins[41] = pin_set(0x00, 0x00, GPIOA, 41);
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f503 7476 	add.w	r4, r3, #984	; 0x3d8
 8001950:	4638      	mov	r0, r7
 8001952:	2329      	movs	r3, #41	; 0x29
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <init_pins+0x690>)
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	f7ff fcbe 	bl	80012dc <pin_set>
 8001960:	4625      	mov	r5, r4
 8001962:	463c      	mov	r4, r7
 8001964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001968:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 42 | PA4
	pins[42] = pin_set(0x04, 0x01, GPIOA, 42);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 8001976:	4638      	mov	r0, r7
 8001978:	232a      	movs	r3, #42	; 0x2a
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <init_pins+0x690>)
 800197e:	2201      	movs	r2, #1
 8001980:	2104      	movs	r1, #4
 8001982:	f7ff fcab 	bl	80012dc <pin_set>
 8001986:	4625      	mov	r5, r4
 8001988:	463c      	mov	r4, r7
 800198a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001992:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 43 | PH0
	pins[43] = pin_set(0x00, 0x00, GPIOA, 43);
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f503 6481 	add.w	r4, r3, #1032	; 0x408
 800199c:	4638      	mov	r0, r7
 800199e:	232b      	movs	r3, #43	; 0x2b
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	4b02      	ldr	r3, [pc, #8]	; (80019ac <init_pins+0x690>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	e006      	b.n	80019b8 <init_pins+0x69c>
 80019aa:	bf00      	nop
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020400 	.word	0x40020400
 80019b8:	f7ff fc90 	bl	80012dc <pin_set>
 80019bc:	4625      	mov	r5, r4
 80019be:	463c      	mov	r4, r7
 80019c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c8:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 44 | PA1
	pins[44] = pin_set(0x01, 0x01, GPIOA, 44);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f503 6484 	add.w	r4, r3, #1056	; 0x420
 80019d2:	4638      	mov	r0, r7
 80019d4:	232c      	movs	r3, #44	; 0x2c
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	4bb3      	ldr	r3, [pc, #716]	; (8001ca8 <init_pins+0x98c>)
 80019da:	2201      	movs	r2, #1
 80019dc:	2101      	movs	r1, #1
 80019de:	f7ff fc7d 	bl	80012dc <pin_set>
 80019e2:	4625      	mov	r5, r4
 80019e4:	463c      	mov	r4, r7
 80019e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ee:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 45 | PB4
	pins[45] = pin_set(0x04, 0x02, GPIOB, 45);
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f503 6487 	add.w	r4, r3, #1080	; 0x438
 80019f8:	4638      	mov	r0, r7
 80019fa:	232d      	movs	r3, #45	; 0x2d
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4bab      	ldr	r3, [pc, #684]	; (8001cac <init_pins+0x990>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	2104      	movs	r1, #4
 8001a04:	f7ff fc6a 	bl	80012dc <pin_set>
 8001a08:	4625      	mov	r5, r4
 8001a0a:	463c      	mov	r4, r7
 8001a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a14:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 46 | PB14
	pins[46] = pin_set(0x0E, 0x02, GPIOB, 46);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 8001a1e:	4638      	mov	r0, r7
 8001a20:	232e      	movs	r3, #46	; 0x2e
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	4ba1      	ldr	r3, [pc, #644]	; (8001cac <init_pins+0x990>)
 8001a26:	2202      	movs	r2, #2
 8001a28:	210e      	movs	r1, #14
 8001a2a:	f7ff fc57 	bl	80012dc <pin_set>
 8001a2e:	4625      	mov	r5, r4
 8001a30:	463c      	mov	r4, r7
 8001a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a3a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 47 | PB10
	pins[47] = pin_set(0x0A, 0x02, GPIOB, 47);
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f503 648d 	add.w	r4, r3, #1128	; 0x468
 8001a44:	4638      	mov	r0, r7
 8001a46:	232f      	movs	r3, #47	; 0x2f
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	4b98      	ldr	r3, [pc, #608]	; (8001cac <init_pins+0x990>)
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	210a      	movs	r1, #10
 8001a50:	f7ff fc44 	bl	80012dc <pin_set>
 8001a54:	4625      	mov	r5, r4
 8001a56:	463c      	mov	r4, r7
 8001a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a60:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 48 | PB15
	pins[48] = pin_set(0x0F, 0x02, GPIOB, 48);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f503 6490 	add.w	r4, r3, #1152	; 0x480
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	2330      	movs	r3, #48	; 0x30
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4b8e      	ldr	r3, [pc, #568]	; (8001cac <init_pins+0x990>)
 8001a72:	2202      	movs	r2, #2
 8001a74:	210f      	movs	r1, #15
 8001a76:	f7ff fc31 	bl	80012dc <pin_set>
 8001a7a:	4625      	mov	r5, r4
 8001a7c:	463c      	mov	r4, r7
 8001a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a86:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 49 | PC2
	pins[49] = pin_set(0x02, 0x04, GPIOC, 49);
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8001a90:	4638      	mov	r0, r7
 8001a92:	2331      	movs	r3, #49	; 0x31
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	4b86      	ldr	r3, [pc, #536]	; (8001cb0 <init_pins+0x994>)
 8001a98:	2204      	movs	r2, #4
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	f7ff fc1e 	bl	80012dc <pin_set>
 8001aa0:	4625      	mov	r5, r4
 8001aa2:	463c      	mov	r4, r7
 8001aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aac:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 50 | PC1
	pins[50] = pin_set(0x01, 0x04, GPIOC, 50);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f503 6496 	add.w	r4, r3, #1200	; 0x4b0
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	2332      	movs	r3, #50	; 0x32
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4b7c      	ldr	r3, [pc, #496]	; (8001cb0 <init_pins+0x994>)
 8001abe:	2204      	movs	r2, #4
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	f7ff fc0b 	bl	80012dc <pin_set>
 8001ac6:	4625      	mov	r5, r4
 8001ac8:	463c      	mov	r4, r7
 8001aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ace:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ad2:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 51 | VBAT
	pins[51] = pin_set(0x00, 0x00, GPIOA, 51);
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8001adc:	4638      	mov	r0, r7
 8001ade:	2333      	movs	r3, #51	; 0x33
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	4b71      	ldr	r3, [pc, #452]	; (8001ca8 <init_pins+0x98c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	f7ff fbf8 	bl	80012dc <pin_set>
 8001aec:	4625      	mov	r5, r4
 8001aee:	463c      	mov	r4, r7
 8001af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af8:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 52 | PB0
	pins[52] = pin_set(0x00, 0x02, GPIOB, 52);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f503 649c 	add.w	r4, r3, #1248	; 0x4e0
 8001b02:	4638      	mov	r0, r7
 8001b04:	2334      	movs	r3, #52	; 0x34
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <init_pins+0x990>)
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	f7ff fbe5 	bl	80012dc <pin_set>
 8001b12:	4625      	mov	r5, r4
 8001b14:	463c      	mov	r4, r7
 8001b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b1e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 53 | PB3
	pins[53] = pin_set(0x03, 0x02, GPIOB, 53);
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f503 649f 	add.w	r4, r3, #1272	; 0x4f8
 8001b28:	4638      	mov	r0, r7
 8001b2a:	2335      	movs	r3, #53	; 0x35
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <init_pins+0x990>)
 8001b30:	2202      	movs	r2, #2
 8001b32:	2103      	movs	r1, #3
 8001b34:	f7ff fbd2 	bl	80012dc <pin_set>
 8001b38:	4625      	mov	r5, r4
 8001b3a:	463c      	mov	r4, r7
 8001b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b44:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 54 | AGND
	pins[54] = pin_set(0x00, 0x00, GPIOA, 54);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f503 64a2 	add.w	r4, r3, #1296	; 0x510
 8001b4e:	4638      	mov	r0, r7
 8001b50:	2336      	movs	r3, #54	; 0x36
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4b54      	ldr	r3, [pc, #336]	; (8001ca8 <init_pins+0x98c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	f7ff fbbf 	bl	80012dc <pin_set>
 8001b5e:	4625      	mov	r5, r4
 8001b60:	463c      	mov	r4, r7
 8001b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b6a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 55 | PB5
	pins[55] = pin_set(0x05, 0x02, GPIOB, 55);
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f503 64a5 	add.w	r4, r3, #1320	; 0x528
 8001b74:	4638      	mov	r0, r7
 8001b76:	2337      	movs	r3, #55	; 0x37
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <init_pins+0x990>)
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	2105      	movs	r1, #5
 8001b80:	f7ff fbac 	bl	80012dc <pin_set>
 8001b84:	4625      	mov	r5, r4
 8001b86:	463c      	mov	r4, r7
 8001b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b90:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 56 | PB13
	pins[56] = pin_set(0x0D, 0x02, GPIOB, 56);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f503 64a8 	add.w	r4, r3, #1344	; 0x540
 8001b9a:	4638      	mov	r0, r7
 8001b9c:	2338      	movs	r3, #56	; 0x38
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4b42      	ldr	r3, [pc, #264]	; (8001cac <init_pins+0x990>)
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	210d      	movs	r1, #13
 8001ba6:	f7ff fb99 	bl	80012dc <pin_set>
 8001baa:	4625      	mov	r5, r4
 8001bac:	463c      	mov	r4, r7
 8001bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bb6:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 57 | PC3
	pins[57] = pin_set(0x03, 0x04, GPIOC, 57);
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 8001bc0:	4638      	mov	r0, r7
 8001bc2:	2339      	movs	r3, #57	; 0x39
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <init_pins+0x994>)
 8001bc8:	2204      	movs	r2, #4
 8001bca:	2103      	movs	r1, #3
 8001bcc:	f7ff fb86 	bl	80012dc <pin_set>
 8001bd0:	4625      	mov	r5, r4
 8001bd2:	463c      	mov	r4, r7
 8001bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bdc:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 58 | PC0
	pins[58] = pin_set(0x00, 0x04, GPIOC, 58);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f503 64ae 	add.w	r4, r3, #1392	; 0x570
 8001be6:	4638      	mov	r0, r7
 8001be8:	233a      	movs	r3, #58	; 0x3a
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <init_pins+0x994>)
 8001bee:	2204      	movs	r2, #4
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	f7ff fb73 	bl	80012dc <pin_set>
 8001bf6:	4625      	mov	r5, r4
 8001bf8:	463c      	mov	r4, r7
 8001bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c02:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 59 | PA3
	pins[59] = pin_set(0x00, 0x01, GPIOA, 59);
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f503 64b1 	add.w	r4, r3, #1416	; 0x588
 8001c0c:	4638      	mov	r0, r7
 8001c0e:	233b      	movs	r3, #59	; 0x3b
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <init_pins+0x98c>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	2100      	movs	r1, #0
 8001c18:	f7ff fb60 	bl	80012dc <pin_set>
 8001c1c:	4625      	mov	r5, r4
 8001c1e:	463c      	mov	r4, r7
 8001c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c28:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 60 | PA2
	pins[60] = pin_set(0x00, 0x01, GPIOA, 60);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8001c32:	4638      	mov	r0, r7
 8001c34:	233c      	movs	r3, #60	; 0x3c
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <init_pins+0x98c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f7ff fb4d 	bl	80012dc <pin_set>
 8001c42:	4625      	mov	r5, r4
 8001c44:	463c      	mov	r4, r7
 8001c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c4e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 61 | PA10
	pins[61] = pin_set(0x0A, 0x01, GPIOA, 61);
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 8001c58:	4638      	mov	r0, r7
 8001c5a:	233d      	movs	r3, #61	; 0x3d
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <init_pins+0x98c>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	210a      	movs	r1, #10
 8001c64:	f7ff fb3a 	bl	80012dc <pin_set>
 8001c68:	4625      	mov	r5, r4
 8001c6a:	463c      	mov	r4, r7
 8001c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c74:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 62 | PC4
	pins[62] = pin_set(0x04, 0x04, GPIOC, 62);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f503 64ba 	add.w	r4, r3, #1488	; 0x5d0
 8001c7e:	4638      	mov	r0, r7
 8001c80:	233e      	movs	r3, #62	; 0x3e
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <init_pins+0x994>)
 8001c86:	2204      	movs	r2, #4
 8001c88:	2104      	movs	r1, #4
 8001c8a:	f7ff fb27 	bl	80012dc <pin_set>
 8001c8e:	4625      	mov	r5, r4
 8001c90:	463c      	mov	r4, r7
 8001c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c9a:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001c9e:	bf00      	nop
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40020800 	.word	0x40020800

08001cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_MspInit+0x4c>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <HAL_MspInit+0x4c>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_MspInit+0x4c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cf2:	2007      	movs	r0, #7
 8001cf4:	f000 fa1e 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_UART_MspInit+0x84>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d12b      	bne.n	8001d7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_UART_MspInit+0x88>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <HAL_UART_MspInit+0x88>)
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_MspInit+0x88>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_UART_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_UART_MspInit+0x88>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_UART_MspInit+0x88>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d5e:	230c      	movs	r3, #12
 8001d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <HAL_UART_MspInit+0x8c>)
 8001d7a:	f000 fa1d 	bl	80021b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	; 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40004400 	.word	0x40004400
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020000 	.word	0x40020000

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <NMI_Handler+0x4>

08001d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <HardFault_Handler+0x4>

08001da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <MemManage_Handler+0x4>

08001da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <BusFault_Handler+0x4>

08001dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <UsageFault_Handler+0x4>

08001db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de0:	f000 f898 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f000 fb81 	bl	80024f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e38:	4c0b      	ldr	r4, [pc, #44]	; (8001e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e46:	f7ff ffd7 	bl	8001df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f001 fcf9 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7fe fb43 	bl	80004d8 <main>
  bx  lr    
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e60:	080038dc 	.word	0x080038dc
  ldr r2, =_sbss
 8001e64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e68:	20000670 	.word	0x20000670

08001e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_Init+0x40>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_Init+0x40>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_Init+0x40>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f94b 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff ff06 	bl	8001cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f963 	bl	800219e <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef0:	f000 f92b 	bl	800214a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008
 8001f38:	2000066c 	.word	0x2000066c

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000066c 	.word	0x2000066c

08001f54 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_SuspendTick+0x1c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_SuspendTick+0x1c>)
 8001f5e:	f023 0302 	bic.w	r3, r3, #2
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_ResumeTick+0x1c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HAL_ResumeTick+0x1c>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4907      	ldr	r1, [pc, #28]	; (8002030 <__NVIC_EnableIRQ+0x38>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff29 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff3e 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff8e 	bl	8002088 <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff31 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa2 	bl	80020f0 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e159      	b.n	8002488 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 8148 	bne.w	8002482 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d005      	beq.n	800220a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002206:	2b02      	cmp	r3, #2
 8002208:	d130      	bne.n	800226c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0201 	and.w	r2, r3, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b03      	cmp	r3, #3
 8002276:	d017      	beq.n	80022a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d123      	bne.n	80022fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	69b9      	ldr	r1, [r7, #24]
 80022f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0203 	and.w	r2, r3, #3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a2 	beq.w	8002482 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b57      	ldr	r3, [pc, #348]	; (80024a0 <HAL_GPIO_Init+0x2e8>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a56      	ldr	r2, [pc, #344]	; (80024a0 <HAL_GPIO_Init+0x2e8>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <HAL_GPIO_Init+0x2e8>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235a:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_GPIO_Init+0x2ec>)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a49      	ldr	r2, [pc, #292]	; (80024a8 <HAL_GPIO_Init+0x2f0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x202>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a48      	ldr	r2, [pc, #288]	; (80024ac <HAL_GPIO_Init+0x2f4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x1fe>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a47      	ldr	r2, [pc, #284]	; (80024b0 <HAL_GPIO_Init+0x2f8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x1fa>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a46      	ldr	r2, [pc, #280]	; (80024b4 <HAL_GPIO_Init+0x2fc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x1f6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a45      	ldr	r2, [pc, #276]	; (80024b8 <HAL_GPIO_Init+0x300>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x1f2>
 80023a6:	2304      	movs	r3, #4
 80023a8:	e008      	b.n	80023bc <HAL_GPIO_Init+0x204>
 80023aa:	2307      	movs	r3, #7
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x204>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e004      	b.n	80023bc <HAL_GPIO_Init+0x204>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_Init+0x204>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x204>
 80023ba:	2300      	movs	r3, #0
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	f002 0203 	and.w	r2, r2, #3
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	4093      	lsls	r3, r2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023cc:	4935      	ldr	r1, [pc, #212]	; (80024a4 <HAL_GPIO_Init+0x2ec>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_GPIO_Init+0x304>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fe:	4a2f      	ldr	r2, [pc, #188]	; (80024bc <HAL_GPIO_Init+0x304>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_GPIO_Init+0x304>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <HAL_GPIO_Init+0x304>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_GPIO_Init+0x304>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002452:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_GPIO_Init+0x304>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_GPIO_Init+0x304>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247c:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_GPIO_Init+0x304>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b0f      	cmp	r3, #15
 800248c:	f67f aea2 	bls.w	80021d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40013c00 	.word	0x40013c00

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024dc:	e003      	b.n	80024e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	041a      	lsls	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f95c 	bl	80007d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_PWR_EnableWakeUpPin+0x20>)
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	4904      	ldr	r1, [pc, #16]	; (8002544 <HAL_PWR_EnableWakeUpPin+0x20>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40007000 	.word	0x40007000

08002548 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_PWR_EnterSLEEPMode+0x34>)
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	4a08      	ldr	r2, [pc, #32]	; (800257c <HAL_PWR_EnterSLEEPMode+0x34>)
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8002566:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002568:	e002      	b.n	8002570 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800256a:	bf40      	sev
    __WFE();
 800256c:	bf20      	wfe
    __WFE();
 800256e:	bf20      	wfe
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_PWR_EnterSTOPMode+0x50>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 0203 	bic.w	r2, r3, #3
 8002594:	490e      	ldr	r1, [pc, #56]	; (80025d0 <HAL_PWR_EnterSTOPMode+0x50>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_PWR_EnterSTOPMode+0x54>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_PWR_EnterSTOPMode+0x54>)
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80025ae:	bf30      	wfi
 80025b0:	e002      	b.n	80025b8 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80025b2:	bf40      	sev
    __WFE();
 80025b4:	bf20      	wfe
    __WFE();
 80025b6:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_PWR_EnterSTOPMode+0x54>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <HAL_PWR_EnterSTOPMode+0x54>)
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	6113      	str	r3, [r2, #16]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40007000 	.word	0x40007000
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4a05      	ldr	r2, [pc, #20]	; (8002604 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80025f4:	bf30      	wfi
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40007000 	.word	0x40007000
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8002612:	f023 0302 	bic.w	r3, r3, #2
 8002616:	6113      	str	r3, [r2, #16]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_PWR_EnableSEVOnPend+0x1c>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8002632:	f043 0310 	orr.w	r3, r3, #16
 8002636:	6113      	str	r3, [r2, #16]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e267      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d075      	beq.n	8002752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002666:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d00c      	beq.n	800268c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002672:	4b85      	ldr	r3, [pc, #532]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267a:	2b08      	cmp	r3, #8
 800267c:	d112      	bne.n	80026a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267e:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800268a:	d10b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	4b7e      	ldr	r3, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d05b      	beq.n	8002750 <HAL_RCC_OscConfig+0x108>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d157      	bne.n	8002750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e242      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ac:	d106      	bne.n	80026bc <HAL_RCC_OscConfig+0x74>
 80026ae:	4b76      	ldr	r3, [pc, #472]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a75      	ldr	r2, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0xb0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x98>
 80026c6:	4b70      	ldr	r3, [pc, #448]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6f      	ldr	r2, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6c      	ldr	r2, [pc, #432]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xb0>
 80026e0:	4b69      	ldr	r3, [pc, #420]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a68      	ldr	r2, [pc, #416]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a65      	ldr	r2, [pc, #404]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fc1c 	bl	8001f3c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff fc18 	bl	8001f3c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e207      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b5b      	ldr	r3, [pc, #364]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xc0>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff fc08 	bl	8001f3c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff fc04 	bl	8001f3c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1f3      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	4b51      	ldr	r3, [pc, #324]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0xe8>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d063      	beq.n	8002826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002772:	2b08      	cmp	r3, #8
 8002774:	d11c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002776:	4b44      	ldr	r3, [pc, #272]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x152>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1c7      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4937      	ldr	r1, [pc, #220]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	e03a      	b.n	8002826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_OscConfig+0x244>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7ff fbbd 	bl	8001f3c <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7ff fbb9 	bl	8001f3c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1a8      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4925      	ldr	r1, [pc, #148]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e015      	b.n	8002826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x244>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7ff fb9c 	bl	8001f3c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002808:	f7ff fb98 	bl	8001f3c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e187      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d036      	beq.n	80028a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCC_OscConfig+0x248>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7ff fb7c 	bl	8001f3c <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002848:	f7ff fb78 	bl	8001f3c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e167      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x200>
 8002866:	e01b      	b.n	80028a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_OscConfig+0x248>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7ff fb65 	bl	8001f3c <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	e00e      	b.n	8002894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002876:	f7ff fb61 	bl	8001f3c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d907      	bls.n	8002894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e150      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
 8002888:	40023800 	.word	0x40023800
 800288c:	42470000 	.word	0x42470000
 8002890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ea      	bne.n	8002876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8097 	beq.w	80029dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b7d      	ldr	r3, [pc, #500]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a7c      	ldr	r2, [pc, #496]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b7a      	ldr	r3, [pc, #488]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b77      	ldr	r3, [pc, #476]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d118      	bne.n	800291c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4b74      	ldr	r3, [pc, #464]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a73      	ldr	r2, [pc, #460]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7ff fb21 	bl	8001f3c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7ff fb1d 	bl	8001f3c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e10c      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x2ea>
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a63      	ldr	r2, [pc, #396]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	e01c      	b.n	800296c <HAL_RCC_OscConfig+0x324>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x30c>
 800293a:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a5e      	ldr	r2, [pc, #376]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a5b      	ldr	r2, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0x324>
 8002954:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002966:	f023 0304 	bic.w	r3, r3, #4
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7ff fae2 	bl	8001f3c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7ff fade 	bl	8001f3c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0cb      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0ee      	beq.n	800297c <HAL_RCC_OscConfig+0x334>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7ff facc 	bl	8001f3c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7ff fac8 	bl	8001f3c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0b5      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029be:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ee      	bne.n	80029a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a38      	ldr	r2, [pc, #224]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a1 	beq.w	8002b28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d05c      	beq.n	8002aac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d141      	bne.n	8002a7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7ff fa9c 	bl	8001f3c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7ff fa98 	bl	8001f3c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e087      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	019b      	lsls	r3, r3, #6
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	491b      	ldr	r1, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7ff fa71 	bl	8001f3c <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7ff fa6d 	bl	8001f3c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e05c      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x416>
 8002a7c:	e054      	b.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7ff fa5a 	bl	8001f3c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7ff fa56 	bl	8001f3c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e045      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x444>
 8002aaa:	e03d      	b.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e038      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_RCC_OscConfig+0x4ec>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d028      	beq.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d121      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d11a      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800

08002b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0cc      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d90c      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0b8      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba4:	4b53      	ldr	r3, [pc, #332]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b50      	ldr	r3, [pc, #320]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	494d      	ldr	r1, [pc, #308]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d044      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d119      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e067      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4934      	ldr	r1, [pc, #208]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7ff f988 	bl	8001f3c <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7ff f984 	bl	8001f3c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e04f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d20c      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e032      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4916      	ldr	r1, [pc, #88]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cbe:	f000 f821 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	490a      	ldr	r1, [pc, #40]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	5ccb      	ldrb	r3, [r1, r3]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f8e8 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023c00 	.word	0x40023c00
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	080038b4 	.word	0x080038b4
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d08:	b094      	sub	sp, #80	; 0x50
 8002d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d10:	2300      	movs	r3, #0
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d14:	2300      	movs	r3, #0
 8002d16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1c:	4b79      	ldr	r3, [pc, #484]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d00d      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x40>
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	f200 80e1 	bhi.w	8002ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x34>
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d003      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d36:	e0db      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b73      	ldr	r3, [pc, #460]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d3c:	e0db      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002d40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d42:	e0d8      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d44:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d4e:	4b6d      	ldr	r3, [pc, #436]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5a:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	099b      	lsrs	r3, r3, #6
 8002d60:	2200      	movs	r2, #0
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
 8002d72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d76:	4622      	mov	r2, r4
 8002d78:	462b      	mov	r3, r5
 8002d7a:	f04f 0000 	mov.w	r0, #0
 8002d7e:	f04f 0100 	mov.w	r1, #0
 8002d82:	0159      	lsls	r1, r3, #5
 8002d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d88:	0150      	lsls	r0, r2, #5
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4621      	mov	r1, r4
 8002d90:	1a51      	subs	r1, r2, r1
 8002d92:	6139      	str	r1, [r7, #16]
 8002d94:	4629      	mov	r1, r5
 8002d96:	eb63 0301 	sbc.w	r3, r3, r1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002da8:	4659      	mov	r1, fp
 8002daa:	018b      	lsls	r3, r1, #6
 8002dac:	4651      	mov	r1, sl
 8002dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002db2:	4651      	mov	r1, sl
 8002db4:	018a      	lsls	r2, r1, #6
 8002db6:	4651      	mov	r1, sl
 8002db8:	ebb2 0801 	subs.w	r8, r2, r1
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dd6:	4690      	mov	r8, r2
 8002dd8:	4699      	mov	r9, r3
 8002dda:	4623      	mov	r3, r4
 8002ddc:	eb18 0303 	adds.w	r3, r8, r3
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	462b      	mov	r3, r5
 8002de4:	eb49 0303 	adc.w	r3, r9, r3
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002df6:	4629      	mov	r1, r5
 8002df8:	024b      	lsls	r3, r1, #9
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e00:	4621      	mov	r1, r4
 8002e02:	024a      	lsls	r2, r1, #9
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e14:	f7fd f9de 	bl	80001d4 <__aeabi_uldivmod>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e20:	e058      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	099b      	lsrs	r3, r3, #6
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	464b      	mov	r3, r9
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	0159      	lsls	r1, r3, #5
 8002e4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e4e:	0150      	lsls	r0, r2, #5
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4641      	mov	r1, r8
 8002e56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e74:	ebb2 040a 	subs.w	r4, r2, sl
 8002e78:	eb63 050b 	sbc.w	r5, r3, fp
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	00eb      	lsls	r3, r5, #3
 8002e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e8a:	00e2      	lsls	r2, r4, #3
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	461d      	mov	r5, r3
 8002e90:	4643      	mov	r3, r8
 8002e92:	18e3      	adds	r3, r4, r3
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	464b      	mov	r3, r9
 8002e98:	eb45 0303 	adc.w	r3, r5, r3
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eaa:	4629      	mov	r1, r5
 8002eac:	028b      	lsls	r3, r1, #10
 8002eae:	4621      	mov	r1, r4
 8002eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	028a      	lsls	r2, r1, #10
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	61fa      	str	r2, [r7, #28]
 8002ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec8:	f7fd f984 	bl	80001d4 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ee4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3750      	adds	r7, #80	; 0x50
 8002efc:	46bd      	mov	sp, r7
 8002efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	007a1200 	.word	0x007a1200

08002f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000000 	.word	0x20000000

08002f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f2c:	f7ff fff0 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0a9b      	lsrs	r3, r3, #10
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4903      	ldr	r1, [pc, #12]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	080038c4 	.word	0x080038c4

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f54:	f7ff ffdc 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0b5b      	lsrs	r3, r3, #13
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4903      	ldr	r1, [pc, #12]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	080038c4 	.word	0x080038c4

08002f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e03f      	b.n	800300a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe feb0 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f9cb 	bl	8003358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b08a      	sub	sp, #40	; 0x28
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b20      	cmp	r3, #32
 8003030:	d17c      	bne.n	800312c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_UART_Transmit+0x2c>
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e075      	b.n	800312e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_UART_Transmit+0x3e>
 800304c:	2302      	movs	r3, #2
 800304e:	e06e      	b.n	800312e <HAL_UART_Transmit+0x11c>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2221      	movs	r2, #33	; 0x21
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003066:	f7fe ff69 	bl	8001f3c <HAL_GetTick>
 800306a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003080:	d108      	bne.n	8003094 <HAL_UART_Transmit+0x82>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e003      	b.n	800309c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030a4:	e02a      	b.n	80030fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f8e2 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e036      	b.n	800312e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10b      	bne.n	80030de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	3302      	adds	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e007      	b.n	80030ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	781a      	ldrb	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	3301      	adds	r3, #1
 80030ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1cf      	bne.n	80030a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2200      	movs	r2, #0
 800310e:	2140      	movs	r1, #64	; 0x40
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f8b2 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e006      	b.n	800312e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e000      	b.n	800312e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800312c:	2302      	movs	r3, #2
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b08a      	sub	sp, #40	; 0x28
 800313a:	af02      	add	r7, sp, #8
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b20      	cmp	r3, #32
 8003154:	f040 808c 	bne.w	8003270 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_UART_Receive+0x2e>
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e084      	b.n	8003272 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_UART_Receive+0x40>
 8003172:	2302      	movs	r3, #2
 8003174:	e07d      	b.n	8003272 <HAL_UART_Receive+0x13c>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2222      	movs	r2, #34	; 0x22
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003192:	f7fe fed3 	bl	8001f3c <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	88fa      	ldrh	r2, [r7, #6]
 800319c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	88fa      	ldrh	r2, [r7, #6]
 80031a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ac:	d108      	bne.n	80031c0 <HAL_UART_Receive+0x8a>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	e003      	b.n	80031c8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80031d0:	e043      	b.n	800325a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2200      	movs	r2, #0
 80031da:	2120      	movs	r1, #32
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f84c 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e042      	b.n	8003272 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10c      	bne.n	800320c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fe:	b29a      	uxth	r2, r3
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	3302      	adds	r3, #2
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	e01f      	b.n	800324c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003214:	d007      	beq.n	8003226 <HAL_UART_Receive+0xf0>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <HAL_UART_Receive+0xfe>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e008      	b.n	8003246 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003240:	b2da      	uxtb	r2, r3
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3301      	adds	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1b6      	bne.n	80031d2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b090      	sub	sp, #64	; 0x40
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328a:	e050      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003292:	d04c      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x30>
 800329a:	f7fe fe4f 	bl	8001f3c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d241      	bcs.n	800332e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	330c      	adds	r3, #12
 80032c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ca:	637a      	str	r2, [r7, #52]	; 0x34
 80032cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d2:	e841 2300 	strex	r3, r2, [r1]
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e5      	bne.n	80032aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3314      	adds	r3, #20
 80032e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	613b      	str	r3, [r7, #16]
   return(result);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3314      	adds	r3, #20
 80032fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032fe:	623a      	str	r2, [r7, #32]
 8003300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	69f9      	ldr	r1, [r7, #28]
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	61bb      	str	r3, [r7, #24]
   return(result);
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e5      	bne.n	80032de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e00f      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	429a      	cmp	r2, r3
 800334a:	d09f      	beq.n	800328c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3740      	adds	r7, #64	; 0x40
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800335c:	b0c0      	sub	sp, #256	; 0x100
 800335e:	af00      	add	r7, sp, #0
 8003360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	68d9      	ldr	r1, [r3, #12]
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	ea40 0301 	orr.w	r3, r0, r1
 8003380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	431a      	orrs	r2, r3
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	431a      	orrs	r2, r3
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033b0:	f021 010c 	bic.w	r1, r1, #12
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033be:	430b      	orrs	r3, r1
 80033c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	6999      	ldr	r1, [r3, #24]
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	ea40 0301 	orr.w	r3, r0, r1
 80033de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b8f      	ldr	r3, [pc, #572]	; (8003624 <UART_SetConfig+0x2cc>)
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d005      	beq.n	80033f8 <UART_SetConfig+0xa0>
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b8d      	ldr	r3, [pc, #564]	; (8003628 <UART_SetConfig+0x2d0>)
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d104      	bne.n	8003402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033f8:	f7ff fdaa 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 80033fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003400:	e003      	b.n	800340a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003402:	f7ff fd91 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8003406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003414:	f040 810c 	bne.w	8003630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341c:	2200      	movs	r2, #0
 800341e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800342a:	4622      	mov	r2, r4
 800342c:	462b      	mov	r3, r5
 800342e:	1891      	adds	r1, r2, r2
 8003430:	65b9      	str	r1, [r7, #88]	; 0x58
 8003432:	415b      	adcs	r3, r3
 8003434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800343a:	4621      	mov	r1, r4
 800343c:	eb12 0801 	adds.w	r8, r2, r1
 8003440:	4629      	mov	r1, r5
 8003442:	eb43 0901 	adc.w	r9, r3, r1
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800345a:	4690      	mov	r8, r2
 800345c:	4699      	mov	r9, r3
 800345e:	4623      	mov	r3, r4
 8003460:	eb18 0303 	adds.w	r3, r8, r3
 8003464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003468:	462b      	mov	r3, r5
 800346a:	eb49 0303 	adc.w	r3, r9, r3
 800346e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800347e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003486:	460b      	mov	r3, r1
 8003488:	18db      	adds	r3, r3, r3
 800348a:	653b      	str	r3, [r7, #80]	; 0x50
 800348c:	4613      	mov	r3, r2
 800348e:	eb42 0303 	adc.w	r3, r2, r3
 8003492:	657b      	str	r3, [r7, #84]	; 0x54
 8003494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800349c:	f7fc fe9a 	bl	80001d4 <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4b61      	ldr	r3, [pc, #388]	; (800362c <UART_SetConfig+0x2d4>)
 80034a6:	fba3 2302 	umull	r2, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	011c      	lsls	r4, r3, #4
 80034ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034c0:	4642      	mov	r2, r8
 80034c2:	464b      	mov	r3, r9
 80034c4:	1891      	adds	r1, r2, r2
 80034c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80034c8:	415b      	adcs	r3, r3
 80034ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034d0:	4641      	mov	r1, r8
 80034d2:	eb12 0a01 	adds.w	sl, r2, r1
 80034d6:	4649      	mov	r1, r9
 80034d8:	eb43 0b01 	adc.w	fp, r3, r1
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f0:	4692      	mov	sl, r2
 80034f2:	469b      	mov	fp, r3
 80034f4:	4643      	mov	r3, r8
 80034f6:	eb1a 0303 	adds.w	r3, sl, r3
 80034fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034fe:	464b      	mov	r3, r9
 8003500:	eb4b 0303 	adc.w	r3, fp, r3
 8003504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800351c:	460b      	mov	r3, r1
 800351e:	18db      	adds	r3, r3, r3
 8003520:	643b      	str	r3, [r7, #64]	; 0x40
 8003522:	4613      	mov	r3, r2
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
 800352a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800352e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003532:	f7fc fe4f 	bl	80001d4 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4611      	mov	r1, r2
 800353c:	4b3b      	ldr	r3, [pc, #236]	; (800362c <UART_SetConfig+0x2d4>)
 800353e:	fba3 2301 	umull	r2, r3, r3, r1
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2264      	movs	r2, #100	; 0x64
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	1acb      	subs	r3, r1, r3
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <UART_SetConfig+0x2d4>)
 8003554:	fba3 2302 	umull	r2, r3, r3, r2
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003560:	441c      	add	r4, r3
 8003562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800356c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	1891      	adds	r1, r2, r2
 800357a:	63b9      	str	r1, [r7, #56]	; 0x38
 800357c:	415b      	adcs	r3, r3
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003584:	4641      	mov	r1, r8
 8003586:	1851      	adds	r1, r2, r1
 8003588:	6339      	str	r1, [r7, #48]	; 0x30
 800358a:	4649      	mov	r1, r9
 800358c:	414b      	adcs	r3, r1
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800359c:	4659      	mov	r1, fp
 800359e:	00cb      	lsls	r3, r1, #3
 80035a0:	4651      	mov	r1, sl
 80035a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a6:	4651      	mov	r1, sl
 80035a8:	00ca      	lsls	r2, r1, #3
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	4642      	mov	r2, r8
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035b8:	464b      	mov	r3, r9
 80035ba:	460a      	mov	r2, r1
 80035bc:	eb42 0303 	adc.w	r3, r2, r3
 80035c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035d8:	460b      	mov	r3, r1
 80035da:	18db      	adds	r3, r3, r3
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035de:	4613      	mov	r3, r2
 80035e0:	eb42 0303 	adc.w	r3, r2, r3
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035ee:	f7fc fdf1 	bl	80001d4 <__aeabi_uldivmod>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <UART_SetConfig+0x2d4>)
 80035f8:	fba3 1302 	umull	r1, r3, r3, r2
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	2164      	movs	r1, #100	; 0x64
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	3332      	adds	r3, #50	; 0x32
 800360a:	4a08      	ldr	r2, [pc, #32]	; (800362c <UART_SetConfig+0x2d4>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	f003 0207 	and.w	r2, r3, #7
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4422      	add	r2, r4
 800361e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003620:	e105      	b.n	800382e <UART_SetConfig+0x4d6>
 8003622:	bf00      	nop
 8003624:	40011000 	.word	0x40011000
 8003628:	40011400 	.word	0x40011400
 800362c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003634:	2200      	movs	r2, #0
 8003636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800363a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800363e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003642:	4642      	mov	r2, r8
 8003644:	464b      	mov	r3, r9
 8003646:	1891      	adds	r1, r2, r2
 8003648:	6239      	str	r1, [r7, #32]
 800364a:	415b      	adcs	r3, r3
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
 800364e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003652:	4641      	mov	r1, r8
 8003654:	1854      	adds	r4, r2, r1
 8003656:	4649      	mov	r1, r9
 8003658:	eb43 0501 	adc.w	r5, r3, r1
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	00eb      	lsls	r3, r5, #3
 8003666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800366a:	00e2      	lsls	r2, r4, #3
 800366c:	4614      	mov	r4, r2
 800366e:	461d      	mov	r5, r3
 8003670:	4643      	mov	r3, r8
 8003672:	18e3      	adds	r3, r4, r3
 8003674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003678:	464b      	mov	r3, r9
 800367a:	eb45 0303 	adc.w	r3, r5, r3
 800367e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800368e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800369e:	4629      	mov	r1, r5
 80036a0:	008b      	lsls	r3, r1, #2
 80036a2:	4621      	mov	r1, r4
 80036a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a8:	4621      	mov	r1, r4
 80036aa:	008a      	lsls	r2, r1, #2
 80036ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036b0:	f7fc fd90 	bl	80001d4 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4b60      	ldr	r3, [pc, #384]	; (800383c <UART_SetConfig+0x4e4>)
 80036ba:	fba3 2302 	umull	r2, r3, r3, r2
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	011c      	lsls	r4, r3, #4
 80036c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	1891      	adds	r1, r2, r2
 80036da:	61b9      	str	r1, [r7, #24]
 80036dc:	415b      	adcs	r3, r3
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e4:	4641      	mov	r1, r8
 80036e6:	1851      	adds	r1, r2, r1
 80036e8:	6139      	str	r1, [r7, #16]
 80036ea:	4649      	mov	r1, r9
 80036ec:	414b      	adcs	r3, r1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036fc:	4659      	mov	r1, fp
 80036fe:	00cb      	lsls	r3, r1, #3
 8003700:	4651      	mov	r1, sl
 8003702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003706:	4651      	mov	r1, sl
 8003708:	00ca      	lsls	r2, r1, #3
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	4603      	mov	r3, r0
 8003710:	4642      	mov	r2, r8
 8003712:	189b      	adds	r3, r3, r2
 8003714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003718:	464b      	mov	r3, r9
 800371a:	460a      	mov	r2, r1
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	67bb      	str	r3, [r7, #120]	; 0x78
 800372e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800373c:	4649      	mov	r1, r9
 800373e:	008b      	lsls	r3, r1, #2
 8003740:	4641      	mov	r1, r8
 8003742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003746:	4641      	mov	r1, r8
 8003748:	008a      	lsls	r2, r1, #2
 800374a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800374e:	f7fc fd41 	bl	80001d4 <__aeabi_uldivmod>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4b39      	ldr	r3, [pc, #228]	; (800383c <UART_SetConfig+0x4e4>)
 8003758:	fba3 1302 	umull	r1, r3, r3, r2
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	2164      	movs	r1, #100	; 0x64
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	3332      	adds	r3, #50	; 0x32
 800376a:	4a34      	ldr	r2, [pc, #208]	; (800383c <UART_SetConfig+0x4e4>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003776:	441c      	add	r4, r3
 8003778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377c:	2200      	movs	r2, #0
 800377e:	673b      	str	r3, [r7, #112]	; 0x70
 8003780:	677a      	str	r2, [r7, #116]	; 0x74
 8003782:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003786:	4642      	mov	r2, r8
 8003788:	464b      	mov	r3, r9
 800378a:	1891      	adds	r1, r2, r2
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	415b      	adcs	r3, r3
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003796:	4641      	mov	r1, r8
 8003798:	1851      	adds	r1, r2, r1
 800379a:	6039      	str	r1, [r7, #0]
 800379c:	4649      	mov	r1, r9
 800379e:	414b      	adcs	r3, r1
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037ae:	4659      	mov	r1, fp
 80037b0:	00cb      	lsls	r3, r1, #3
 80037b2:	4651      	mov	r1, sl
 80037b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b8:	4651      	mov	r1, sl
 80037ba:	00ca      	lsls	r2, r1, #3
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	4603      	mov	r3, r0
 80037c2:	4642      	mov	r2, r8
 80037c4:	189b      	adds	r3, r3, r2
 80037c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80037c8:	464b      	mov	r3, r9
 80037ca:	460a      	mov	r2, r1
 80037cc:	eb42 0303 	adc.w	r3, r2, r3
 80037d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	663b      	str	r3, [r7, #96]	; 0x60
 80037dc:	667a      	str	r2, [r7, #100]	; 0x64
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037ea:	4649      	mov	r1, r9
 80037ec:	008b      	lsls	r3, r1, #2
 80037ee:	4641      	mov	r1, r8
 80037f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f4:	4641      	mov	r1, r8
 80037f6:	008a      	lsls	r2, r1, #2
 80037f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037fc:	f7fc fcea 	bl	80001d4 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <UART_SetConfig+0x4e4>)
 8003806:	fba3 1302 	umull	r1, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2164      	movs	r1, #100	; 0x64
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a08      	ldr	r2, [pc, #32]	; (800383c <UART_SetConfig+0x4e4>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 020f 	and.w	r2, r3, #15
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4422      	add	r2, r4
 800382c:	609a      	str	r2, [r3, #8]
}
 800382e:	bf00      	nop
 8003830:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	51eb851f 	.word	0x51eb851f

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4d0d      	ldr	r5, [pc, #52]	; (8003878 <__libc_init_array+0x38>)
 8003844:	4c0d      	ldr	r4, [pc, #52]	; (800387c <__libc_init_array+0x3c>)
 8003846:	1b64      	subs	r4, r4, r5
 8003848:	10a4      	asrs	r4, r4, #2
 800384a:	2600      	movs	r6, #0
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	4d0b      	ldr	r5, [pc, #44]	; (8003880 <__libc_init_array+0x40>)
 8003852:	4c0c      	ldr	r4, [pc, #48]	; (8003884 <__libc_init_array+0x44>)
 8003854:	f000 f820 	bl	8003898 <_init>
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	2600      	movs	r6, #0
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	080038d4 	.word	0x080038d4
 800387c:	080038d4 	.word	0x080038d4
 8003880:	080038d4 	.word	0x080038d4
 8003884:	080038d8 	.word	0x080038d8

08003888 <memset>:
 8003888:	4402      	add	r2, r0
 800388a:	4603      	mov	r3, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <_init>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	bf00      	nop
 800389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389e:	bc08      	pop	{r3}
 80038a0:	469e      	mov	lr, r3
 80038a2:	4770      	bx	lr

080038a4 <_fini>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr
